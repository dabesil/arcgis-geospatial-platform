const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/imageryUtils-CwhhEzFI.js","assets/utils-Bhi3GPuQ.js","assets/index-jfgqsXUF.js","assets/vendor-0HVaVRtn.js","assets/index-CDFczaSZ.css","assets/originUtils-CPX8CCAY.js","assets/multiOriginJSONSupportUtils-C0wm8_Yw.js","assets/jsonContext-IECY0PAb.js","assets/saveUtils-8pLXGnn6.js"])))=>i.map(i=>d[i]);
import{aX as E,cm as z,dB as Ne,o7 as $e,o8 as Ee,a0 as S,a1 as C,a2 as W,f1 as _e,s as F,O as Oe,G as de,o9 as Be,M as De,bf as Ae,ca as ie,aJ as Le,I as Je,z as H,ab as ge,dq as ze,dr as Ue,f4 as je,f5 as Ge,fg as He,fE as We,ff as Ve,f3 as qe,f6 as Ye,aT as Xe,ds as Ke,g9 as Ze,_ as Qe,hV as ee,bj as et,ia as tt,bM as st,cK as at,f8 as it,cM as rt,ch as Se}from"./index-jfgqsXUF.js";import{X as Y,i as ue,t as L,n as Ce,e as A,o as G,u as te,K as nt,a as ot}from"./xmlUtilities-CIghnmp3.js";import{c as lt,f as ct,o as ut}from"./RasterPresetRendererMixin-DCzrS59o.js";import{p as ft,N as ht,o as pt,c as mt,b as dt,e as gt,$ as yt,j as wt,t as xt,k as It}from"./rasterFieldUtils-Dr3M4aXk.js";import{w as Fe}from"./ImageHistogramParameters-B9uJXTJ8.js";import{g as re,E as bt,W as vt,T as St}from"./dataUtils-G0oyxIro.js";import{d as oe,h as Tt,m as Me,p as we,P as Rt,n as xe,r as _t,b as Te,F as Ot,N as Ct,U as Ft,c as se,B as Mt,L as kt,R as Pt,D as Nt}from"./RasterSymbolizer-BcQ2EPG_.js";import{y as Ie,c as $t}from"./PolynomialTransform-BAkYx4Ep.js";import{T as Et}from"./TilemapCache-Dx-gvjgM.js";import{w as Bt,T as Dt}from"./rasterFunctionHelper-CJqTQD32.js";import"./vendor-0HVaVRtn.js";import"./QueueProcessor-CI9vbH7V.js";import"./RawBlockCache-DzeLwMyG.js";import"./rasterProjectionHelper-BlDPQ7GD.js";import"./ClassBreaksDefinition-1D8MEf8v.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./memoryEstimations-BucWCUN2.js";function ke(t){return["x","e","east","long","longitude"].includes(t.toLowerCase())}function Pe(t){return["y","n","west","lat","latitude"].includes(t.toLowerCase())}function At(t){const{axes:e}=t.domain,s=Object.keys(e),a=[],i=[];let r=-1,n=-1,c=[];for(let w=0;w<s.length;w++){const R=s[w];ke(R)?r=w:Pe(R)&&(n=w);const I=e[R],b=[];if("values"in I){I.values.forEach(x=>b.push(typeof x=="string"?new Date(x).getTime():x));const v=b[1]-b[0];a.push([b[0]-.5*v,b[b.length-1]+.5*v]),i.push(v)}else{const{start:v,stop:x,num:_}=I,T=(x-v)/(_-1);a.push([v-.5*T,x+.5*T]),i.push(T);for(let k=0;k<_;k++)b.push(v+T*k)}c.push({name:R,values:b,extent:[b[0],b[b.length-1]]})}r>-1&&n===-1?n=r===0?1:0:n>-1&&r===-1?r=n===0?1:0:n===-1&&r===-1&&(r=0,n=1),c=c.filter((w,R)=>!(R===r||R===n));const{referencing:o}=t.domain,l=o.find(w=>w.coordinates.includes(s[r])).system.id,u=l?.slice(l.lastIndexOf("/")+1),p=u==null||u==="CRS84"?4326:Number(u),h=new E({wkid:p}),[f,g]=a[r],[y,m]=a[n],d=new z({xmin:f,xmax:g,ymin:y,ymax:m,spatialReference:h});return{width:Math.round(d.width/i[r]),height:Math.round(d.height/i[n]),extent:d,dimensions:c}}function fe(t){const e=Ee();return e?t[e]??Object.values(t)[0]:Object.values(t)[0]}function he(){return Math.round(255*Math.random())}function Lt(t){const e={},{parameters:s}=t;if(!s)return e;for(const[a,i]of Object.entries(s)){const{type:r,description:n,unit:c,categoryEncoding:o,observedProperty:l}=i;if(r==="Parameter"&&(e[a]={},n&&(e[a].description=fe(n)),c&&(e[a].unit=c.label?fe(c.label):null,e[a].symbol=c.symbol?.value),o)){const u=Object.entries(o).map((f,g)=>({OID:g,Value:Number(f[1]),ClassName:f[0].slice(f[0].lastIndexOf("/")+1),Count:1}));let p=!1;l?.categories?.length&&(l.categories.forEach(f=>{if(!f.id)return;const g=f.id.slice(f.id.lastIndexOf("/")+1),y=u.find(d=>d.ClassName===g);if(!y)return;const m=f.label?fe(f.label):null;if(y.Label=m,f.preferredColor){const d=Ne.fromHex(f.preferredColor);d&&(p=!0,y.Red=d.r,y.Green=d.g,y.Blue=d.b)}}),p&&u.forEach(f=>{f.Red==null&&(f.Red=he(),f.Green=he(),f.Blue=he())}));const h={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:u.map(f=>({attributes:f}))};p&&h.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[a].attributeTable=h}}return e}function Jt(t){let e=Number.MAX_VALUE,s=-Number.MAX_VALUE;for(let a=0;a<t.length;a++){const i=t[a];i!=null&&(i<e&&(e=i),i>s&&(s=i))}return $e(e,s)}function zt(t,e,s){const a=t.map((o,l)=>({name:o,count:e[l]})).sort((o,l)=>o.name>l.name?-1:1),i=(r=1,o=>r*=o.count);var r;const n=[...a.slice(1),{name:"",count:1}].reverse().map(i).reverse();let c=0;for(let o=t.length-1;o>=0;o--)c+=n[a.findIndex(({name:l})=>l===t[o])]*(s%e[o]),s=Math.floor(s/e[o]);return c}function Ut(t){const{width:e,height:s,extent:a,dimensions:i}=At(t),{ranges:r}=t,n=Object.keys(r).sort((h,f)=>h<f?-1:1),c=[];for(let h=0;h<n.length;h++){const f=n[h];i?.length&&c.push({name:f,dimensions:i})}const o=Lt(t);c.forEach(h=>o[h.name]&&Object.assign(h,o[h.name]));const l=c.length?{variables:c}:void 0,u=[];for(let h=0;h<n.length;h++){const f=n[h],{values:g,dataType:y,axisNames:m,shape:d}=r[f],w=d.length>2?h*d.slice(0,-2).reduce((_,T)=>_*T):0,R=m.slice(0,-2),I=d.slice(0,-2),b=y==="float"?"f32":Jt(g),v=e*s,x=g.length/v;for(let _=0;_<x;_++){const T=re.createEmptyBand(b,v),k=new Uint8Array(v).fill(255);let O=!1;const N=_*v;for(let M=0;M<v;M++){const B=g[N+M];B==null?(k[M]=0,O=!0):T[M]=B}if(h===0||i?.length){const M=new re({width:e,height:s,mask:O?k:null,pixels:[T],pixelType:b});M.updateStatistics(),i?.length?u[zt(R,I,_)+w]=M:u.push(M)}else{const M=u[_];M.pixels.push(T),O?M.mask&&(M.mask=re.combineBandMasks([M.mask,k])):M.mask=O?k:null}}}const p=Object.values(o).find(h=>h.attributeTable)?.attributeTable;return{extent:a,pixelBlocks:u,multidimensionalInfo:l,attributeTable:p,bandNames:l?void 0:n}}let V=class extends Y{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(t,e,s,a={}){if(!this._pixelBlockTiles){const{rasterInfo:r}=this,[n,c]=r.storageInfo.tileInfo.size,{sliceId:o}=a,{pixelBlocks:l}=this.source,u={pixelBlock:o==null?l[0]:l[o],useBilinear:r.dataType!=="thematic",tileSize:{width:n,height:c},level:t,row:e,col:s},p=this.rasterJobHandler?this.rasterJobHandler.clipTile(u,a):bt(u);return Promise.resolve(p)}const i=this._pixelBlockTiles.get(`${t}/${e}/${s}`);return Promise.resolve(i)}async _open(t){const e=this.source,{pixelBlocks:s,attributeTable:a,statistics:i,histograms:r,name:n,nativeExtent:c,transform:o}=e,l=s[0],{width:u,height:p,pixelType:h}=l,f=e.extent??new z({xmin:-.5,ymin:.5,xmax:u-.5,ymax:p-.5,spatialReference:new E({wkid:3857})}),g=e.isPseudoSpatialReference??!e.extent,y={x:f.width/u,y:f.height/p},m={...e.keyProperties};a&&(m.DataType="Thematic");const d=new oe({width:u,height:p,pixelType:h,extent:f,nativeExtent:c,attributeTable:a,transform:o,pixelSize:y,spatialReference:f.spatialReference,bandCount:l.pixels.length,keyProperties:m,multidimensionalInfo:e.multidimensionalInfo,statistics:i,isPseudoSpatialReference:g,histograms:r});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(d),this.createRemoteDatasetStorageInfo(d,512,512),this._set("rasterInfo",d),this.updateTileInfo(),d.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,d.multidimensionalInfo):await this._buildInMemoryRaster(l,{width:512,height:512},t),d.multidimensionalInfo||(this.source=null),this.datasetName=n}async _buildInMemoryRaster(t,e,s){const{rasterInfo:a}=this,i=a.storageInfo.maximumPyramidLevel??0,r=a.dataType!=="thematic",n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:i,useBilinear:r},s):Promise.resolve(vt(t,e,i,r)),c=a.statistics!=null,o=a.histograms!=null,l=this.ioConfig.skipStatistics||c?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},s):Promise.resolve(Tt(t)),u=await _e([n,l]);if(!u[0].value&&u[1].value)throw new F("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=u[0].value,c||(a.statistics=u[1].value?.statistics),o||(a.histograms=u[1].value?.histograms)}async _buildMDimStats(t,e,s){for(let a=0;a<e.variables.length;a++){const i=e.variables[a];if(i.statistics)continue;const r=i.dimensions.map(l=>new ft({variableName:i.name,dimensionName:l.name,values:[l.values?.[0]??l.extent?.[0]],isSlice:!0})),n=ht(r,e),c=n==null?null:t[n];if(c==null)continue;const o=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:c},s):Me(c);i.statistics=o.statistics,i.histograms||(i.histograms=o.histograms)}}};S([C({type:String,json:{write:!0}})],V.prototype,"datasetFormat",void 0),S([C()],V.prototype,"source",void 0),S([C()],V.prototype,"url",null),V=S([W("esri.layers.support.rasterDatasets.InMemoryRaster")],V);const be=V;let X=class extends Y{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(e,s,a,i={}){return this._inMemoryRaster.fetchRawTile(e,s,a,i)}async _open(e){const{extent:s,pixelBlocks:a,multidimensionalInfo:i,attributeTable:r,bandNames:n}=await this._fetchData(e),{statistics:c,histograms:o}=Me(a[0]),l=n?.map(f=>({BandName:f})),u={DataType:r?"Thematic":i?"Scientific":"Generic",BandProperties:l},p=new be({source:{extent:s,pixelBlocks:a,attributeTable:r?Oe.fromJSON(r):null,multidimensionalInfo:i,statistics:c,histograms:o,keyProperties:u,isPseudoSpatialReference:!1}});await p.open(),this._inMemoryRaster=p;const h=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",h.slice(0,h.indexOf("."))),this._set("rasterInfo",p.rasterInfo)}async _fetchData(e){const s=this.source??(await this.request(this.url,{signal:e?.signal})).data,a="imagery-tile-layer:open-coverage-json";if(s.type?.toLowerCase()!=="coverage"||s.domain?.domainType?.toLowerCase()!=="grid")throw new F(a,"Only coverage with Grid domain type is supported");if(!s.ranges)throw new F(a,"Missing ranges in the grid coverage data");if(!s.domain.referencing?.length)throw new F(a,"Missing domain referencing in the grid coverage data");const i=Object.values(s.ranges);for(let r=0;r<i.length;r++){const{axisNames:n,shape:c,type:o,values:l}=i[r];if(!(o.toLowerCase()==="ndarray"&&l?.length&&n?.length&&c?.length))throw new F(a,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!(ke(n[n.length-1])&&Pe(n[n.length-2])))throw new F(a,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return Ut(s)}};S([C({type:String,json:{write:!0}})],X.prototype,"datasetFormat",void 0),S([C({constructOnly:!0})],X.prototype,"source",void 0),X=S([W("esri.layers.support.rasterDatasets.CovJSONRaster")],X);const jt=X;function Re(t,e){if(!t||!e)return null;const s=[];for(let a=0;a<t.length;a++)s.push(t[a]),s.push(e[a]);return s}function Gt(t){const e=A(t,"GeodataXform"),s=le(G(e,"SpatialReference/WKID")||L(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:s,transform:null};const a=G(e,"PolynomialOrder")??1,i=te(e,"CoeffX/Double"),r=te(e,"CoeffY/Double"),n=te(e,"InverseCoeffX/Double"),c=te(e,"InverseCoeffY/Double"),o=Re(i,r),l=Re(n,c);return{spatialReference:s,transform:o&&l&&o.length&&l.length?new Ie({spatialReference:s,polynomialOrder:a,forwardCoefficients:o,inverseCoefficients:l}):null}}function Ht(t){const e=G(t,"NoDataValue"),s=A(t,"Histograms/HistItem"),a=G(s,"HistMin"),i=G(s,"HistMax"),r=G(s,"BucketCount"),n=L(s,"HistCounts")?.split("|").map(h=>Number(h));let c,o,l,u;Ce(t,"Metadata/MDI").forEach(h=>{const f=Number(h.textContent??h.nodeValue);switch(h.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":c=f;break;case"STATISTICS_MAXIMUM":o=f;break;case"STATISTICS_MEAN":l=f;break;case"STATISTICS_STDDEV":u=f}});const p=G(t,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:n?.length&&a!=null&&i!=null?{min:a,max:i,size:r||n.length,counts:n}:null,sourceBandIndex:p,statistics:c!=null&&o!=null?{min:c,max:o,avg:l,stddev:u}:null}}function le(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&e!==0)return new E({wkid:e});if(t=String(t).trim(),Be(t))return new E({wkt2:t});const s=t.toUpperCase();if(s.startsWith("COMPD_CS")){if(!s.includes("VERTCS")||!s.includes("GEOGCS")&&!s.startsWith("PROJCS"))return null;const a=s.indexOf("VERTCS"),i=s.indexOf("PROJCS"),r=i>-1?i:s.indexOf("GEOGCS");if(r===-1)return null;const n=t.slice(r,t.lastIndexOf("]",a)+1).trim(),c=t.slice(a,t.lastIndexOf("]")).trim();e=pe(n);const o=new E(e?{wkid:e}:{wkt:n}),l=pe(c);return l&&(o.vcsWkid=l),o}return s.startsWith("GEOGCS")||s.startsWith("PROJCS")?(e=pe(t),new E(e!==0?{wkid:e}:{wkt:t})):null}function pe(t){const e=t.replaceAll("]","[").replaceAll('"',"").split("[").map(i=>i.trim()).filter(i=>i!==""),s=e[e.length-1].split(","),a=s[0]?.toLowerCase();if((a==="epsg"||a==="esri")&&t.endsWith('"]]')){const i=Number(s[1]);if(!isNaN(i)&&i!==0)return i}return 0}function ve(t){if(t?.documentElement.tagName?.toLowerCase()!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach(a=>{if(a.nodeType===1){if(ue(a,"SRS")){if(!e.spatialReference){const i=L(a);e.spatialReference=le(i)}}else if(ue(a,"Metadata"))if(a.getAttribute("domain")==="xml:ESRI"){const{spatialReference:i,transform:r}=Gt(a);e.transform=r,e.spatialReference||(e.spatialReference=i)}else Ce(a,"MDI").forEach(i=>e.metadata[i.getAttribute("key")]=L(i));else if(ue(a,"PAMRasterBand")){const i=Ht(a);i.sourceBandIndex!=null&&e.rasterBands[i.sourceBandIndex]==null?e.rasterBands[i.sourceBandIndex]=i:e.rasterBands.push(i)}}});const s=e.rasterBands;if(s.length){const a=!!s[0].statistics;e.statistics=a?s.map(r=>r.statistics).filter(de):null;const i=!!s[0].histogram;e.histograms=i?s.map(r=>r.histogram).filter(de):null}return e}let ne=class extends Y{fetchRawTile(t,e,s,a={}){return this._inMemoryRaster.fetchRawTile(t,e,s,a)}async _open(t){const e=await this._fetchData(t);let{spatialReference:s,statistics:a,histograms:i,transform:r}=await this._fetchAuxiliaryData(t);const n=!s;n&&(s=new E({wkid:3857})),i?.length&&a==null&&(a=we(i));const{width:c,height:o}=e;let l=new z({xmin:-.5,ymin:.5-o,xmax:c-.5,ymax:.5,spatialReference:s});const u=r?r.forwardTransform(l):l;let p=!0;if(r){const f=r.forwardCoefficients;p=f&&f[1]===0&&f[2]===0,p&&(r=null,l=u)}const h=new be({source:{extent:u,nativeExtent:l,transform:r,pixelBlocks:[e],statistics:a,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:n},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(h.ioConfig.skipMapInfo=!0),await h.open(),h.source=null,this._set("rasterInfo",h.rasterInfo),this._inMemoryRaster=h}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),s=Rt(e).toUpperCase();if(s!=="JPG"&&s!=="PNG"&&s!=="GIF"&&s!=="BMP")throw new F("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);const a=s.toLowerCase(),i=a==="gif"||a==="bmp"||!De("ios"),r=await this.decodePixelBlock(e,{format:a,useCanvas:i,hasNoZlibMask:!0});if(r==null)throw new F("image-aux-raster:open","the data cannot be decoded");return r}async _fetchAuxiliaryData(t){const e=t?.signal,{skipExtensions:s=[],skipMapInfo:a}=this.ioConfig,i=a||s.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),r=this.datasetFormat,n=r==="JPG"?"jgw":r==="PNG"?"pgw":r==="BMP"?"bpw":null,c=n&&s.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),o=await _e([i,c]);if(e?.aborted)throw Ae();const l=ve(o[0].value?.data);if(!l.transform){const u=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(p=>Number(p)):null;l.transform=u?.length===6?new Ie({forwardCoefficients:[u[4],u[5],u[0],-u[1],u[2],-u[3]]}):null}return l}};S([C({type:String,json:{write:!0}})],ne.prototype,"datasetFormat",void 0),ne=S([W("esri.layers.support.rasterDatasets.ImageAuxRaster")],ne);const ae=ne;let K=class extends Y{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(t,e,s,a={}){const{storageInfo:i,extent:r}=this.rasterInfo,{transposeInfo:n}=i,c=n!=null&&!!a.transposedVariableName;if(this._slices&&!c&&a.sliceId==null)return null;const o=c?0:i.maximumPyramidLevel-t+this._levelOffset,l=`${this.url}/tile/${o}/${e}/${s}`,u=this._slices?c?{variable:a.transposedVariableName}:{sliceId:a.sliceId||0}:null,{data:p}=await this.request(l,{query:u,responseType:"array-buffer",signal:a.signal});if(!p)return null;const h=c?n.tileSize:i.tileInfo.size,f=await this.decodePixelBlock(p,{width:h[0],height:h[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:c,noDataValue:this.rasterInfo.noDataValue});if(f==null)return null;const g=i.blockBoundary[t];if(i.compression!=="jpg"||s>g.minCol&&s<g.maxCol&&e>g.minRow&&e<g.maxRow)return f;const{origin:y,blockWidth:m,blockHeight:d}=i,{x:w,y:R}=this.getPyramidPixelSize(t),I=Math.round((r.xmin-y.x)/w)%m,b=Math.round((r.xmax-y.x)/w)%m||m,v=Math.round((y.y-r.ymax)/R)%d,x=Math.round((y.y-r.ymin)/R)%d||d,_=s===g.minCol?I:0,T=e===g.minRow?v:0,k=s===g.maxCol?b:m,O=e===g.maxRow?x:d;return St(f,{x:_,y:T},{width:k-_,height:O-T}),f}getSliceIndex(t){if(!this._slices||t==null||t.length===0)return null;const e=t;for(let s=0;s<this._slices.length;s++){const a=this._slices[s].multidimensionalDefinition;if(a.length===e.length&&!a.some(i=>{const r=e.find(n=>i.variableName===n.variableName&&n.dimensionName===i.dimensionName);return r?(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])!==(Array.isArray(r.values[0])?`${r.values[0][0]}-${r.values[0][1]}`:r.values[0]):!0}))return s}return null}async fetchVariableStatisticsHistograms(t,e){const s=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then(r=>r.data?.statistics),a=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then(r=>r.data?.histograms),i=await Promise.all([s,a]);return i[0]&&i[0].forEach(r=>{r.avg=r.mean,r.stddev=r.standardDeviation}),i[1]?.[0]?.counts?.length||(i[1]=null),{statistics:i[0]||null,histograms:i[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(t,0,e.datumTransformation);if(s===null)return null;let a=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let r=i-a+this._levelOffset;const n=s.srcLocation;for(;r>=0;){try{if(await this._tilemapCache.fetchAvailability(r,s.row,s.col,e)==="available")break}catch{}if(r--,a++,s=this.identifyPixelLocation(n,a,e.datumTransformation),s===null)return null}return r===-1||s==null?null:a}async _open(t){const e=t?.signal,s=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});s.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const a=s.data;if(this.sourceJSON=a,!a)throw new F("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!a.tileInfo)throw new F("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const i=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=a.cacheType,this.tileType==null&&(i.includes(a.tileInfo.format.toLowerCase())?this.tileType="Map":a.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=a.name?.slice(a.name.indexOf("/")+1)??"";const r=await this._fetchRasterInfo({signal:e});if(r==null)throw new F("image-server-raster:open","cannot initialize image service");lt(r,a);const n=this.tileType==="Map"?Wt(a.tileInfo,a):ie.fromJSON(a.tileInfo);Le(n);const[c,o]=this._computeMinMaxLOD(r,n),{extent:l,pixelSize:u}=r,p=.5/r.width*u.x,h=Math.max(u.x,u.y),{lods:f}=n;(this.tileType!=="Map"&&a.maxScale!==0||Math.abs(u.x-u.y)>p||!f.some(x=>Math.abs(x.resolution-h)<p))&&(u.x=u.y=c.resolution,r.width=Math.ceil((l.xmax-l.xmin)/u.x-.1),r.height=Math.ceil((l.ymax-l.ymin)/u.y-.1));const g=c.level-o.level,[y,m]=n.size,d=[],w=[];f.forEach((x,_)=>{x.level>=o.level&&x.level<=c.level&&d.push({x:x.resolution,y:x.resolution}),_<f.length-1&&w.push(Math.round(10*x.resolution/f[_+1].resolution)/10)}),d.sort((x,_)=>x.x-_.x);const R=this.computeBlockBoundary(l,y,m,n.origin,d,g),I=d.length>1?d.slice(1):null;let b;a.transposeInfo&&(b={tileSize:[a.transposeInfo.rows,a.transposeInfo.cols],packetSize:r.keyProperties?._yxs.PacketSize??0});const v=w.length<=1||w.length>=3&&w.slice(0,-1).every(x=>x===w[0])?w[0]??2:Math.round(10/(o.resolution/c.resolution)**(-1/g))/10;if(r.storageInfo=new xe({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:I,pyramidScalingFactor:v,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:g,tileInfo:n,transposeInfo:b,blockBoundary:R}),Vt(r),this._set("rasterInfo",r),a.capabilities.toLowerCase().includes("tilemap")){const x={tileInfo:r.storageInfo.tileInfo,parsedUrl:Je(this.url),url:this.url,tileServers:[]};this._tilemapCache=new Et({layer:x})}}async _fetchRasterInfo(t){const e=this.sourceJSON;if(this.tileType==="Map"){const n=e.fullExtent||e.extent,c=Math.ceil((n.xmax-n.xmin)/e.pixelSizeX-.1),o=Math.ceil((n.ymax-n.ymin)/e.pixelSizeY-.1),l=E.fromJSON(e.spatialReference||n.spatialReference),u=new H({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:l});return new oe({width:c,height:o,bandCount:3,extent:z.fromJSON(n),spatialReference:l,pixelSize:u,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:s}=t,a=ct(this.url,this.sourceJSON,{signal:s,query:this.ioConfig.customFetchParameters}),i=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:s}).then(n=>n.data?.slices).catch(()=>null):null,r=await Promise.all([a,i]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_computeMinMaxLOD(t,e){const{pixelSize:s}=t,a=.5/t.width*s.x,{lods:i}=e,r=e.lodAt(Math.max.apply(null,i.map(h=>h.level))),n=e.lodAt(Math.min.apply(null,i.map(h=>h.level))),{tileType:c}=this;if(c==="Map")return this._levelOffset=i[0].level,[r,n];if(c==="Raster")return[i.find(h=>h.resolution===s.x)??r,n];const{minScale:o,maxScale:l}=this.sourceJSON;let u=r;l>0&&(u=i.find(h=>Math.abs(h.scale-l)<a),u||(u=i.filter(h=>h.scale>l).sort((h,f)=>h.scale>f.scale?1:-1)[0]??r));let p=n;return o>0&&(p=i.find(h=>Math.abs(h.scale-o)<a)??n,this._levelOffset=p.level-n.level),[u,p]}};function Wt(t,e){if(!t)return null;const{minScale:s,maxScale:a,minLOD:i,maxLOD:r}=e;if(i!=null&&r!=null)return ie.fromJSON({...t,lods:t.lods.filter(({level:n})=>n!=null&&n>=i&&n<=r)});if(s!==0&&a!==0){const n=l=>Math.round(1e4*l)/1e4,c=s?n(s):1/0,o=a?n(a):-1/0;return ie.fromJSON({...t,lods:t.lods.filter(l=>{const u=n(l.scale);return u<=c&&u>=o})})}return ie.fromJSON(t)}function Vt(t){const{extent:e,spatialReference:s}=t;e.xmin>-1&&e.xmax>181&&s?.wkid&&s.isGeographic&&(t.nativeExtent=t.extent,t.transform=new $t,t.extent=t.transform.forwardTransform(e))}S([C({type:String,json:{write:!0}})],K.prototype,"datasetFormat",void 0),S([C()],K.prototype,"tileType",void 0),K=S([W("esri.layers.support.rasterDatasets.ImageServerRaster")],K);const qt=K,D=new Map;D.set("Int8","s8"),D.set("UInt8","u8"),D.set("Int16","s16"),D.set("UInt16","u16"),D.set("Int32","s32"),D.set("UInt32","u32"),D.set("Float32","f32"),D.set("Float64","f32"),D.set("Double64","f32");const J=new Map;J.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),J.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),J.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),J.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let q=class extends Y{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(t,e,s,a={}){const{blockWidth:i,blockHeight:r,blockBoundary:n}=this.rasterInfo.storageInfo,c=n[t];if(!c||c.maxRow<e||c.maxCol<s||c.minRow>e||c.minCol>s)return null;const{bandCount:o,pixelType:l}=this.rasterInfo,{ranges:u,actualTileWidth:p,actualTileHeight:h}=this._getTileLocation(t,e,s);if(!u||u.length===0)return null;if(u[0].from===0&&u[0].to===0){const O=new Uint8Array(i*r);return new re({width:i,height:r,pixels:void 0,mask:O,validPixelCount:0})}const{bandIds:f}=this.ioConfig,g=this._getBandSegmentCount(),y=[];let m=0;for(m=0;m<g;m++)f&&!f.includes(m)||y.push(this.request(this._files.data,{range:{from:u[m].from,to:u[m].to},responseType:"array-buffer",signal:a.signal}));const d=await Promise.all(y),w=d.map(O=>O.data.byteLength).reduce((O,N)=>O+N),R=new Uint8Array(w),I=[];let b=0;for(m=0;m<g;m++)I.push(b),R.set(new Uint8Array(d[m].data),b),b+=d[m].data.byteLength;const v=J.get(this.rasterInfo.storageInfo.compression).decoderFormat,x=await this.decodePixelBlock(R.buffer,{width:i,height:r,format:v,planes:f?.length||o,offsets:I,pixelType:l});if(x==null)return null;let{noDataValue:_}=this.rasterInfo;if(_!=null&&v!=="lerc"&&!x.mask&&(_=_[0],_!=null)){const O=x.width*x.height,N=new Uint8Array(O);if(Math.abs(_)>1e24)for(m=0;m<O;m++)Math.abs((x.pixels[0][m]-_)/_)>1e-6&&(N[m]=1);else for(m=0;m<O;m++)x.pixels[0][m]!==_&&(N[m]=1);x.mask=N}let T=0,k=0;if(p!==i||h!==r){let O=x.mask;if(O)for(m=0;m<r;m++)if(k=m*i,m<h)for(T=p;T<i;T++)O[k+T]=0;else for(T=0;T<i;T++)O[k+T]=0;else for(O=new Uint8Array(i*r),x.mask=O,m=0;m<h;m++)for(k=m*i,T=0;T<p;T++)O[k+T]=1}return x}async _open(t){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?t.signal:null,s=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:a,files:i}=this._parseHeader(s.data),{skipMapInfo:r,skipExtensions:n=[]}=this.ioConfig;if(!n.includes("aux.xml")&&!r){const d=await this._fetchAuxiliaryData(t);d!=null&&(a.statistics=d.statistics??a.statistics,a.histograms=d.histograms,d.histograms&&a.statistics==null&&(a.statistics=we(d.histograms)))}r&&this.updateImageSpaceRasterInfo(a),this._set("rasterInfo",a),this._files=i;const c=await this.request(i.index,{responseType:"array-buffer",signal:e});this._storageIndex=Yt(c.data);const{blockWidth:o,blockHeight:l}=this.rasterInfo.storageInfo,u=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:p,height:h}=this.rasterInfo,f=[],g=this._getBandSegmentCount();let y=0,m=-1;for(;y<this._storageIndex.length;){m++;const d=Math.ceil(p/o/u**m)-1,w=Math.ceil(h/l/u**m)-1;y+=(d+1)*(w+1)*g*4,f.push({maxRow:w,maxCol:d,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=f,m>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=m),this.updateTileInfo()}_getBandSegmentCount(){return J.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,s){const{blockWidth:a,blockHeight:i,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:n,height:c}=this.rasterInfo,o=this._getBandSegmentCount();let l,u,p,h=0,f=0;for(p=0;p<t;p++)f=r**p,l=Math.ceil(n/a/f),u=Math.ceil(c/i/f),h+=l*u;f=r**t,l=Math.ceil(n/a/f),u=Math.ceil(c/i/f),h+=e*l+s,h*=4*o;const g=this._storageIndex.subarray(h,h+4*o);let y=0,m=0;const d=[];for(let w=0;w<o;w++)y=g[4*w]*2**32+g[4*w+1],m=y+g[4*w+2]*2**32+g[4*w+3],d.push({from:y,to:m});return{ranges:d,actualTileWidth:s<l-1?a:Math.ceil(n/f)-a*(l-1),actualTileHeight:e<u-1?i:Math.ceil(c/f)-i*(u-1)}}_parseHeader(t){const e=A(t,"MRF_META/Raster");if(!e)throw new F("mrf:open","not a valid MRF format");const s=A(e,"Size"),a=parseInt(s.getAttribute("x"),10),i=parseInt(s.getAttribute("y"),10),r=parseInt(s.getAttribute("c"),10),n=(L(e,"Compression")||"none").toLowerCase();if(!J.has(n))throw new F("mrf:open","currently does not support compression "+n);const c=L(e,"DataType")||"UInt8",o=D.get(c);if(o==null)throw new F("mrf:open","currently does not support pixel type "+c);const l=A(e,"PageSize"),u=parseInt(l.getAttribute("x"),10),p=parseInt(l.getAttribute("y"),10),h=A(e,"DataValues");let f,g;if(h&&(g=h.getAttribute("NoData"),g!=null&&(f=g.trim().split(" ").map(O=>parseFloat(O)))),A(t,"MRF_META/CachedSource"))throw new F("mrf:open","currently does not support MRF referencing other data files");const y=A(t,"MRF_META/GeoTags"),m=A(y,"BoundingBox");let d,w=!1;if(m!=null){const O=parseFloat(m.getAttribute("minx")),N=parseFloat(m.getAttribute("miny")),M=parseFloat(m.getAttribute("maxx")),B=parseFloat(m.getAttribute("maxy")),U=L(y,"Projection")||"";let Q=E.WGS84;if(U!=="LOCAL_CS[]")if(U.toLowerCase().startsWith("epsg:")){const ce=Number(U.slice(5));isNaN(ce)||ce===0||(Q=new E({wkid:ce}))}else Q=le(U)??E.WGS84;else w=!0,Q=new E({wkid:3857});d=new z(O,N,M,B),d.spatialReference=Q}else w=!0,d=new z({xmin:-.5,ymin:.5-i,xmax:a-.5,ymax:.5,spatialReference:new E({wkid:3857})});const R=A(t,"MRF_META/Rsets"),I=parseInt(R?.getAttribute("scale")||"2",10),b=d.spatialReference,v=new xe({origin:new H({x:d.xmin,y:d.ymax,spatialReference:b}),blockWidth:u,blockHeight:p,pyramidBlockWidth:u,pyramidBlockHeight:p,compression:n,pyramidScalingFactor:I}),x=new H({x:d.width/a,y:d.height/i,spatialReference:b}),_=new oe({width:a,height:i,extent:d,isPseudoSpatialReference:w,spatialReference:b,bandCount:r,pixelType:o,pixelSize:x,noDataValue:f,storageInfo:v}),T=L(t,"datafile"),k=L(t,"IndexFile");return{rasterInfo:_,files:{mrf:this.url,index:k||this.url.replace(".mrf",".idx"),data:T||this.url.replace(".mrf",J.get(n).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return ve(e)}catch{return null}}};function Yt(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,s,a,i,r,n;if(_t){for(s=new Uint8Array(t),i=new ArrayBuffer(t.byteLength),a=new Uint8Array(i),r=0;r<t.byteLength/4;r++)for(n=0;n<4;n++)a[4*r+n]=s[4*r+3-n];e=new Uint32Array(i)}else e=new Uint32Array(t);return e}S([C()],q.prototype,"_files",void 0),S([C()],q.prototype,"_storageIndex",void 0),S([C({type:String,json:{write:!0}})],q.prototype,"datasetFormat",void 0),q=S([W("esri.layers.support.rasterDatasets.MRFRaster")],q);const Xt=q;function Kt(t){const e=t.fields,s=t.records,a=e.some(l=>l.name.toLowerCase()==="oid")?"OBJECTID":"OID",i=[{name:a,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(l=>({name:l.name,type:"esriFieldType"+l.typeName,alias:l.name}))),r=i.map(l=>l.name),n=[];let c=0,o=0;return s.forEach(l=>{const u={};for(u[a]=c++,o=1;o<r.length;o++)u[r[o]]=l[o-1];n.push({attributes:u})}),{displayFieldName:"",fields:i,features:n}}class Zt{static get supportedVersions(){return[5]}static parse(e){const s=new DataView(e),a=3&s.getUint8(0);if(a!==3)return{header:{version:a},recordSet:null};const i=s.getUint32(4,!0),r=s.getUint16(8,!0),n=s.getUint16(10,!0),c={version:a,recordCount:i,headerByteCount:r,recordByteCount:n};let o=32;const l=[],u=[];let p;if(a===3){for(;s.getUint8(o)!==13;)p=String.fromCharCode(s.getUint8(o+11)).trim(),l.push({name:Te(new Uint8Array(e,o,11)),type:p,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(p)],length:s.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;u.length<i&&e.byteLength-o>n;){const h=[];s.getUint8(o)===32?(o+=1,l.forEach(f=>{if(f.type==="C")h.push(Te(new Uint8Array(e,o,f.length)).trim());else if(f.type==="N")h.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,f.length)).trim(),10));else if(f.type==="F")h.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,f.length)).trim()));else if(f.type==="D"){const g=String.fromCharCode.apply(null,new Uint8Array(e,o,f.length)).trim();h.push(new Date(parseInt(g.slice(0,4),10),parseInt(g.slice(4,6),10)-1,parseInt(g.slice(6,8),10)))}o+=f.length}),u.push(h)):o+=n}}return{header:c,fields:l,records:u,recordSet:Kt({fields:l,records:u})}}}const ye=(t,e)=>t.get(e)?.values,Z=(t,e)=>t.get(e)?.values?.[0];let j=class extends Y{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async fetchRawTile(t,e,s,a={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(t,e,s))return null;const i=await this._fetchRawTiffTile(t,e,s,!1,a);if(i!=null&&this._headerInfo.hasMaskBand){const r=await this._fetchRawTiffTile(t,e,s,!0,a);r!=null&&r.pixels[0]instanceof Uint8Array&&(i.mask=r.pixels[0])}return i}async _open(t){const e=t?t.signal:null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!s)throw new F("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:a,firstIFDPos:i,isBigTiff:r}=Ot(s),n=[];await this._readIFDs(n,s,a,i,0,r?8:4,e);const{imageInfo:c,rasterInfo:o}=Qt(n),l=Ct(n),u=Ft(n);if(this._headerInfo={littleEndian:a,isBigTiff:r,ifds:n,pyramidIFDs:l,maskIFDs:u,...c},this._set("rasterInfo",o),!c.isSupported)throw new F("tiffraster:open","this tiff is not supported: "+c.message);if(!c.tileWidth)throw new F("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");o.isPseudoSpatialReference&&ge.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const p=n[0].get("PREDICTOR")?.values?.[0];if(n[0].get("SAMPLEFORMAT")?.values?.[0]===3&&p===2)throw new F("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:f,skipExtensions:g=[]}=this.ioConfig;if(!g.includes("aux.xml")&&!f){const y=await this._fetchAuxiliaryMetaData(t);y!=null&&es(y,o)}g.includes("vat.dbf")||o.bandCount!==1||o.pixelType!=="u8"||f||(o.attributeTable=await this._fetchAuxiliaryTable(t),o.attributeTable!=null&&(o.keyProperties.DataType="thematic")),f&&this.updateImageSpaceRasterInfo(o),this.updateTileInfo()}async _readIFDs(t,e,s,a,i,r=4,n){if(!a)return null;(a>=e.byteLength||a<0)&&(e=(await this.request(this.url,{range:{from:a+i,to:a+i+this._bufferSize},responseType:"array-buffer",signal:n})).data,i=a+i,a=0);const c=await this._readIFD(e,s,a,i,se.tiffTags,r,n);if(t.push(c.ifd),!c.nextIFD)return null;await this._readIFDs(t,e,s,c.nextIFD-i,i,r,n)}async _readIFD(t,e,s,a,i=se.tiffTags,r=4,n){if(!t)return null;const c=Mt(t,e,s,a,i,r);if(c.success){const o=[];if(c.ifd?.forEach(l=>{l.values||o.push(l)}),o.length>0){const l=o.map(p=>p.offlineOffsetSize).filter(de),u=Math.min.apply(null,l.map(p=>p[0]));if(Math.min.apply(null,l.map(p=>p[0]+p[1]))-u<=this._bufferSize){const{data:p}=await this.request(this.url,{range:{from:u,to:u+this._bufferSize},responseType:"array-buffer",signal:n});t=p,a=u,o.forEach(h=>kt(t,e,h,a))}}if(c.ifd?.has("GEOKEYDIRECTORY")){const l=c.ifd.get("GEOKEYDIRECTORY"),u=l?.values;if(u&&u.length>4){const p=u[0]+"."+u[1]+"."+u[2],h=await this._readIFD(t,e,l.valueOffset+6-a,a,se.geoKeys,2,n);l.data=h.ifd,l.data&&l.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[p]})}}return c}if(c.requiredBufferSize&&c.requiredBufferSize!==t.byteLength)return(t=(await this.request(this.url,{range:{from:a,to:a+c.requiredBufferSize+4},responseType:"array-buffer",signal:n})).data).byteLength<c.requiredBufferSize?null:this._readIFD(t,e,0,a,se.tiffTags,4,n)}async _fetchRawTiffTile(t,e,s,a,i={}){const r=this._getTileLocation(t,e,s,a);if(!r)return null;const{ranges:n,actualTileWidth:c,actualTileHeight:o,ifd:l}=r,u=n.map(v=>this.request(this.url,{range:v,responseType:"array-buffer",signal:i.signal})),p=await Promise.all(u),h=p.map(v=>v.data.byteLength).reduce((v,x)=>v+x),f=p.length===1?p[0].data:new ArrayBuffer(h),g=[0],y=[0];if(p.length>1){const v=new Uint8Array(f);for(let x=0,_=0;x<p.length;x++){const T=p[x].data;v.set(new Uint8Array(T),_),g[x]=_,_+=T.byteLength,y[x]=T.byteLength}}const{blockWidth:m,blockHeight:d}=this.getBlockWidthHeight(t),w=await this.decodePixelBlock(f,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:l,offsets:g,sizes:y},width:m,height:d,planes:null,pixelType:null});if(w==null)return null;let R,I,b;if(c!==m||o!==d){let v=w.mask;if(v)for(R=0;R<d;R++)if(b=R*m,R<o)for(I=c;I<m;I++)v[b+I]=0;else for(I=0;I<m;I++)v[b+I]=0;else for(v=new Uint8Array(m*d),w.mask=v,R=0;R<o;R++)for(b=R*m,I=0;I<c;I++)v[b+I]=1}return w}_getTileLocation(t,e,s,a=!1){const{firstPyramidLevel:i,blockBoundary:r}=this.rasterInfo.storageInfo,n=t===0?0:t-(i-1),{_headerInfo:c}=this;if(!c)return null;const o=a?c.maskIFDs[n]:n===0?c?.ifds[0]:c?.pyramidIFDs[n-1];if(!o)return null;const l=Pt(o,c),u=ye(o,"TILEOFFSETS");if(u===void 0)return null;const p=ye(o,"TILEBYTECOUNTS"),{minRow:h,minCol:f,maxRow:g,maxCol:y}=r[n];if(e>g||s>y||e<h||s<f)return null;const m=Z(o,"IMAGEWIDTH"),d=Z(o,"IMAGELENGTH"),w=Z(o,"TILEWIDTH"),R=Z(o,"TILELENGTH"),I=[];if(l){const{bandCount:b}=this.rasterInfo;for(let v=0;v<b;v++){const x=v*(g+1)*(y+1)+e*(y+1)+s;I[v]={from:u[x],to:u[x]+p[x]-1}}}else{const b=e*(y+1)+s;I.push({from:u[b],to:u[b]+p[b]-1})}for(let b=0;b<I.length;b++)if(I[b].from==null||!I[b].to||I[b].to<0)return null;return{ranges:I,ifd:o,actualTileWidth:s===y&&m%w||w,actualTileHeight:e===g&&d%R||R}}async _fetchAuxiliaryMetaData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return ve(e)}catch{return null}}async _fetchAuxiliaryTable(t){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:t?.signal}),s=Zt.parse(e);return s?.recordSet?Oe.fromJSON(s.recordSet):null}catch{return null}}};function Qt(t){const e=Nt(t),{width:s,height:a,tileWidth:i,tileHeight:r,planes:n,pixelType:c,compression:o,firstPyramidLevel:l,maximumPyramidLevel:u,pyramidBlockWidth:p,pyramidBlockHeight:h,pyramidResolutions:f,tileBoundary:g,affine:y,metadata:m}=e,d=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let w=le(d),R=!!e.isPseudoGeographic;w==null&&(R=!0,w=new E({wkid:3857}));const I=new z({...e.extent,spatialReference:w}),b=new H(I?{x:I.xmin,y:I.ymax,spatialReference:w}:{x:0,y:0}),v=new xe({blockWidth:i,blockHeight:r,pyramidBlockWidth:p,pyramidBlockHeight:h,compression:o,origin:b,firstPyramidLevel:l,maximumPyramidLevel:u,pyramidResolutions:f,blockBoundary:g}),x=new H({x:(I.xmax-I.xmin)/s,y:(I.ymax-I.ymin)/a,spatialReference:w}),_=m?{BandProperties:m.bandProperties,DataType:m.dataType}:{};let T=null;const k=Z(t[0],"PHOTOMETRICINTERPRETATION"),O=ye(t[0],"COLORMAP");if(k<=3&&O?.length>3&&O.length%3==0){T=[];const M=O.length/3;for(let B=0;B<M;B++)T.push([B,O[B]>>>8,O[B+M]>>>8,O[B+2*M]>>>8])}const N=new oe({width:s,height:a,bandCount:n,pixelType:c,pixelSize:x,storageInfo:v,spatialReference:w,isPseudoSpatialReference:R,keyProperties:_,extent:I,colormap:T,statistics:m?m.statistics:null});if(y?.length&&(N.nativeExtent=new z({xmin:-.5,ymin:.5-a,xmax:s-.5,ymax:.5,spatialReference:w}),N.transform=new Ie({polynomialOrder:1,forwardCoefficients:[y[2]+y[0]/2,y[5]-y[3]/2,y[0],y[3],-y[1],-y[4]]}),N.extent=N.transform.forwardTransform(N.nativeExtent),N.pixelSize=new H({x:(I.xmax-I.xmin)/s,y:(I.ymax-I.ymin)/a,spatialReference:w}),v.origin.x=-.5,v.origin.y=.5),f){const{x:M,y:B}=N.pixelSize;f.forEach(U=>{U.x*=M,U.y*=B})}return{imageInfo:e,rasterInfo:N}}function es(t,e){if(e.statistics=t.statistics??e.statistics,e.histograms=t.histograms,t.histograms&&e.statistics==null&&(e.statistics=we(t.histograms)),t.transform&&e.transform==null){e.transform=t.transform,e.nativeExtent=e.extent;const s=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new H({x:(s.xmax-s.xmin)/e.width,y:(s.ymax-s.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=s}e.isPseudoSpatialReference&&t.spatialReference&&(e.spatialReference=t.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}S([C()],j.prototype,"_files",void 0),S([C()],j.prototype,"_headerInfo",void 0),S([C()],j.prototype,"_bufferSize",void 0),S([C({type:String,json:{write:!0}})],j.prototype,"datasetFormat",void 0),j=S([W("esri.layers.support.rasterDatasets.TIFFRaster")],j);const ts=j,$=new Map;$.set("MRF",{desc:"Meta Raster Format",constructor:Xt}),$.set("TIFF",{desc:"GeoTIFF",constructor:ts}),$.set("RasterTileServer",{desc:"Raster Tile Server",constructor:qt}),$.set("JPG",{desc:"JPG Raster Format",constructor:ae}),$.set("PNG",{desc:"PNG Raster Format",constructor:ae}),$.set("GIF",{desc:"GIF Raster Format",constructor:ae}),$.set("BMP",{desc:"BMP Raster Format",constructor:ae}),$.set("CovJSON",{desc:"COVJSON Raster Format",constructor:jt}),$.set("MEMORY",{desc:"In Memory Raster Format",constructor:be});class me{static get supportedFormats(){const e=new Set;return $.forEach((s,a)=>e.add(a)),e}static async open(e){const{url:s,ioConfig:a,source:i,sourceJSON:r}=e;let n=e.datasetFormat??a?.datasetFormat;n==null&&(s.includes(".")?n=s.slice(s.lastIndexOf(".")+1).toUpperCase():i?.type?.toLowerCase()==="coverage"?n="CovJSON":i?.extent&&i.pixelblocks&&(n="MEMORY")),n==="OVR"||n==="TIF"?n="TIFF":n==="JPG"||n==="JPEG"||n==="JFIF"?n="JPG":n==="COVJSON"&&(n="CovJSON"),s.toLowerCase().includes("/imageserver")&&!s.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const c={url:s,source:i,sourceJSON:r,datasetFormat:n,ioConfig:a??{bandIds:null,sampling:null}};if(Object.keys(c).forEach(p=>{c[p]==null&&delete c[p]}),n){if(!this.supportedFormats.has(n))throw new F("rasterfactory:open","not a supported format "+n);if(n==="CRF")throw new F("rasterfactory:open",`cannot open raster: ${s}`);const p=new($.get(n)).constructor(c);return await p.open({signal:e.signal}),p}const o=Array.from($.keys()).filter(p=>p!=="CovJSON"&&p!=="Memory");let l=0;const u=()=>{if(n=o[l++],!n||n==="CRF")return null;const p=new($.get(n)).constructor(c);return p.open({signal:e.signal}).then(()=>p).catch(()=>u())};return u()}static register(e,s,a){$.has(e.toUpperCase())||$.set(e.toUpperCase(),{desc:s,constructor:a})}}let P=class extends ze(Ue(je(Ge(ut(He(nt(We(Ve(qe(Ye(Xe.ClonableMixin(Ke)))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=Ze(async(e,s,a)=>{const{save:i,saveAs:r}=await Qe(()=>import("./imageryUtils-CwhhEzFI.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8]));switch(e){case ee.SAVE:return i(this,s);case ee.SAVE_AS:return r(this,a,s)}})}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(et).then(()=>this._openRaster(e))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const t=[pt("Pixel Value"),mt("Raw Pixel Value")],e=this.raster?.rasterInfo??this.serviceRasterInfo,s=e?.attributeTable;if(s){const r=dt(s);t.push(...r)}const a=e?.dataType,i=e?.multidimensionalInfo;if((a==="vector-magdir"||a==="vector-uv")&&i!=null){const r=i.variables[0].unit?.trim(),n=gt(r),c=yt();t.push(n,c)}if(i){const r=wt(i);t.push(...r)}return t}createPopupTemplate(t){const{rasterFields:e}=this,s=t?.visibleFieldNames??new Set(e.map(({name:r})=>r).filter(r=>r!==xt.rawServicePixelValue)),a=tt({fields:e,title:this.title},{...t,visibleFieldNames:s}),{rasterInfo:i}=this.raster;return a?.fieldInfos&&i&&It(a.fieldInfos,i),a}async generateRasterInfo(t,e){if(t=st(Fe,t),await this.load(),!t||t.functionName?.toLowerCase()==="none")return this.serviceRasterInfo;try{const{rasterInfo:s}=await this._openFunctionRaster(t,e);return s}catch(s){throw s instanceof F?s:new F("imagery-tile-layer","the given raster function is not supported")}}async save(t){return this._debouncedSaveOperations(ee.SAVE,t)}async saveAs(t,e){return this._debouncedSaveOperations(ee.SAVE_AS,e,t)}write(t,e){const s=this._primaryRasters[0]??this.raster;if(this.loaded?s.datasetFormat==="RasterTileServer"&&(s.tileType==="Raster"||s.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(t,e);if(e?.messages){const a=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new F("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${a}'`,{layer:this}))}return null}async _openRaster(t){let e=!1;if(this.raster)await this._openFromRaster(this.raster,t),e=this.raster.datasetFormat==="Function",!e&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:a,rasterFunction:i,source:r}=this;if(!a&&!r)throw new F("imagery-tile-layer:open","missing url or source parameter");r?await this._openFromSource(r,t):i?await this._openFromUrlWithRasterFunction(a,i,t):await this._openFromUrl(a,t)}const s=this.raster.rasterInfo;if(!s)throw new F("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?s:this._primaryRasters[0].rasterInfo),this._set("spatialReference",s.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const a=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(a,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(at(()=>this.customParameters,a=>{this.raster&&(this.raster.ioConfig.customFetchParameters=a)}))}async _openFromRaster(t,e){t.rasterInfo||await t.open({signal:e}),this._primaryRasters=t.datasetFormat==="Function"?t.primaryRasters.rasters:[t],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(t,e,s){const a=[t];e&&Bt(e.toJSON(),a);const i=await Promise.all(a.map(n=>me.open({url:n,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:s}))),r=i.findIndex(n=>n==null);if(r>-1)throw new F("imagery-tile-layer:open",`cannot open raster: ${a[r]}`);return this._primaryRasters=i,this._initializeWithFunctionRaster(e)}async _openFromUrl(t,e){const s=await me.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(s==null)throw new F("imagery-tile-layer:open",`cannot open raster: ${t}`);this._primaryRasters=[s],this.raster=s}async _openFromSource(t,e){const s="the tiled imagery data source is not supported",a=t.type?.toLowerCase()==="coverage"?"CovJSON":t.extent&&t.pixelBlock?"MEMORY":null;if(!a)throw new F("imagery-tile-layer:open",s);a==="MEMORY"&&(t={...t,pixelBlock:void 0,pixelBlocks:[t.pixelBlock]});const i=await me.open({url:"",source:t,datasetFormat:a,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(i==null)throw new F("imagery-tile-layer:open",s);this._primaryRasters=[i],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=i}async _openFunctionRaster(t,e){const s={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(r=>s[r.url]=r);const a=Dt(t.functionDefinition?.toJSON()??t.toJSON(),s),i=new ot({rasterFunction:a});return await i.open(e),i}async _initializeWithFunctionRaster(t,e){try{this.raster=await this._openFunctionRaster(t,e)}catch(s){s instanceof F&&ge.getLogger(this).error("imagery-tile-layer:open",s.message),ge.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};S([C({clonable:!1})],P.prototype,"_primaryRasters",void 0),S([C(it)],P.prototype,"legendEnabled",void 0),S([C({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],P.prototype,"isReference",void 0),S([C({type:["show","hide"]})],P.prototype,"listMode",void 0),S([C({json:{read:!0,write:!0}})],P.prototype,"blendMode",void 0),S([C({type:Fe,json:{name:"renderingRule",write:!0}})],P.prototype,"rasterFunction",void 0),S([C()],P.prototype,"sourceJSON",void 0),S([C({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],P.prototype,"version",void 0),S([C({readOnly:!0,json:{read:!1}})],P.prototype,"type",void 0),S([C({type:["ArcGISTiledImageServiceLayer"]})],P.prototype,"operationalLayerType",void 0),S([C({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(t,e,s){e[s]=!t}}}})],P.prototype,"popupEnabled",void 0),S([C({type:rt,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],P.prototype,"popupTemplate",void 0),S([C({readOnly:!0})],P.prototype,"defaultPopupTemplate",null),S([C({readOnly:!0,type:[Se]})],P.prototype,"fields",void 0),S([C({readOnly:!0,type:[Se]})],P.prototype,"rasterFields",null),S([C({constructOnly:!0})],P.prototype,"source",void 0),P=S([W("esri.layers.ImageryTileLayer")],P);const bs=P;export{bs as default};
