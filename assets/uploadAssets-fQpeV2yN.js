import{M as A,eU as X,c6 as $,c4 as Q,lj as _,lk as x,cf as h,P as m,A as l,fW as Y,ll as Z,lm as ee,ln as se,ac as te,gH as oe,lo as re,aX as ne,eT as ae,bj as ie,gz as ce,ab as le}from"./index-jfgqsXUF.js";import{m as ue,N as pe,b as fe,a as D,i as E}from"./External-DS4qwLAW.js";import{r as me,n as de,t as ge,l as he,c as I,a as we,b as ye,d as Pe,u as be,p as Te}from"./meshSpatialReferenceScaleUtils-xjfa2c6l.js";import{i as Ae,n as $e}from"./meshFeatureAttributes-DziH9lqn.js";import"./vendor-0HVaVRtn.js";import"./MeshTransform-r605QPF9.js";import"./mat4f64-Dk4dwAN8.js";import"./quat-4Sj-KpO-.js";import"./mat3f64-q3fE-ZOt.js";import"./quatf64-aQ5IuZRd.js";import"./axisAngleDegrees-DBKvQhgc.js";const v={uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function w(t,e=o=>{},s){return new ve(t,e,s)}let ve=class{constructor(e,s=r=>{},o){if(this.onProgress=s,this.taskName=o,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof e=="number"){this._weights={};for(let r=0;r<e;r++){const n=r,a=1/e;this._weights[n]=a,this._progressMap.set(n,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,o]of this._progressMap.entries())e+=o*this._weights[s];if(e===1&&A("enable-feature:esri-3dofl-upload-timings")){const s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(const[o,r]of this._timingsMap){const n=Math.round(r.end-r.start)/1e3,a=Math.round(n/s*100);console.log(this.taskName??"Task",{stepKey:o,stepTime:n,relativeTime:a})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),A("enable-feature:esri-3dofl-upload-timings")){const o=performance.now();this._startTime??=o;const r=X(this._timingsMap,e,()=>({start:o,end:0}));s===1&&(r.end=o)}this.emitProgress()}simulate(e,s){return k(o=>this.setProgress(e,o),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}};function k(t=s=>{},e=_e){const s=performance.now();t(0);const o=setInterval(()=>{const r=performance.now()-s,n=1-Math.exp(-r/e);t(n)},Se);return Q(()=>{clearInterval(o),t(1)})}function je(t,e=Fe){return _(x(t*R/e))}function Me(t,e=Ne){return _(x(t*R/e))}const Fe=10,Ne=10,R=8e-6,Se=$(50),_e=$(1e3),C=1e6,S=20*C,xe=2e9,De=3;async function Ee({data:t,name:e,description:s},o,r){let n=null;try{const a=h(o,"uploads"),i=h(a,"info"),{data:u}=await m(i,{query:{f:"json"},responseType:"json"});l(r);const d=Y(o),g=u.maxUploadFileSize*C,f=d?xe:g,c=d?Math.min(S,g):S;if(t.size>f)throw new Error("Data too large");const z=h(a,"register"),{data:j}=await m(z,{query:{f:"json",itemName:Ie(e),description:s},responseType:"json",method:"post"});if(l(r),!j.success)throw new Error("Registration failed");const{itemID:L}=j.item;n=h(a,L);const H=h(n,"uploadPart"),M=Math.ceil(t.size/c),y=new Array;for(let p=0;p<M;++p)y.push(t.slice(p*c,Math.min((p+1)*c,t.size)));const P=y.slice().reverse(),F=new Array,G=w(M,r?.onProgress,"uploadItem"),J=async()=>{for(;P.length!==0;){const p=y.length-P.length,b=P.pop(),T=new FormData,K=G.simulate(p,je(b.size));try{T.append("f","json"),T.append("file",b),T.append("partId",`${p}`);const{data:V}=await m(H,{timeout:0,body:T,responseType:"json",method:"post"});if(l(r),!V.success)throw new Error("Part upload failed")}finally{K.remove()}}};for(let p=0;p<De&&P.length!==0;++p)F.push(J());await Promise.all(F);const W=h(n,"commit"),{data:N}=await m(W,{query:{f:"json",parts:y.map((p,b)=>b).join(",")},responseType:"json",method:"post"});if(l(r),!N.success)throw new Error("Commit failed");return N.item}catch(a){if(n!=null){const i=h(n,"delete");await m(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function Ie(t){return t.replaceAll("/","_").replaceAll("\\","_")}async function ds(t,e,s){const o=t.length;if(!o)return s?.onProgress?.(1),[];const r=w(o,s?.onProgress,"uploadAssets");return Promise.all(t.map((n,a)=>ke(n,e,{...s,onProgress:r.makeOnProgress(a)})))}async function ke(t,{layer:e,ongoingUploads:s},o){const r=s.get(t);if(r)return r;if(!Ze(e))throw new me;if(Re(t,e))return o?.onProgress?.(1),t;const n=Ce(t,e,o);s.set(t,n);try{await n}finally{s.delete(t)}return t}function Re(t,e){const{parsedUrl:s}=e;return s!=null&&t.metadata.externalSources.some(o=>ue(o,s))}async function Ce(t,e,s){const{metadata:o}=t,{displaySource:r}=o,n=U(r?.source,e,{checkForConversionRequired:A("enable-feature:georeferenced-uploads")}),a=n!=null?Ue(n,e,s):o.externalSources.length>0?Oe(t,e,s):qe(t,e,s),i=await a;return l(s),t.addExternalSources([i]),t}async function Ue(t,e,s){return{source:await O(t,e,s),original:!0,unitConversionDisabled:!0}}async function Oe(t,e,s){const o=B(e),{externalSources:r}=t.metadata,n=ze(r,e);if(!n)throw new de;const a=w(v.uploadConvertibleSource,s?.onProgress,"uploadConvertibleSource"),i=await O(n,e,{onProgress:a.makeOnProgress("uploadEditSource")});t.addExternalSources([{source:i,original:!0}]);const u=n.reduce((g,{asset:f})=>f instanceof File?g+f.size:g,0),d=a.simulate("serviceAssetsToGlb",Me(u));try{const{source:g,transform:f,origin:c}=await Ve(i,e,o);return t.transform=f,c&&(t.metadata.georeferenced=!0,s?.useAssetOrigin&&(t.vertexSpace.origin=[c.x,c.y,c.z??0],t.spatialReference=c.spatialReference)),{source:g,unitConversionDisabled:!0}}finally{d.remove()}}async function qe(t,e,s){const o=w(v.uploadLocalMesh,s?.onProgress,"uploadLocalMesh"),r=Be(t,e,{...s,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await q([r],e,{...s,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:t.extent.clone(),original:!0}}async function Be(t,e,s){const o=B(e),r=await t.load(s),n=await r.toBinaryGLTF({origin:r.origin,signal:s?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return l(s),{blob:new Blob([n],{type:"model/gltf-binary"}),assetName:`${te()}.glb`,assetType:o}}function ze(t,e){for(const s of t){const o=U(s.source,e);if(o)return o}return null}function U(t,{infoFor3D:e},s={}){if(!t)return null;const{supportedFormats:o,editFormats:r}=e,n=pe(t),a=new Array,i=Z(e),u=ee(e);let d=!1;for(const g of n){const f=Le(g,o);if(!f)return null;const{assetType:c}=f;if(s.checkForConversionRequired&&(c===i||c===u))return null;r.includes(c)&&(d=!0),a.push(f)}return d?a:null}function Le(t,e){const s=fe(t,e);return s?{asset:t,assetType:s}:null}async function O(t,e,s){return q(t.map(o=>He(o,s)),e,s)}async function q(t,e,s){const o=w(v.uploadAssetBlobs,s?.onProgress,"uploadAssetBlobs"),r=await Je(t,e,{...s,onProgress:o.makeOnProgress("prepareAssetItems")});l(s);const n=r.map(({item:i})=>i),{uploadResults:a}=await We(n,e,{...s,onProgress:o.makeOnProgress("uploadAssetItems")});return l(s),t.map((i,u)=>Ke(r[u],a[u],e))}async function He(t,e){const{asset:s,assetType:o}=t;if(s instanceof File)return{blob:s,assetName:s.name,assetType:o};const r=await s.toBlob(e);return l(e),{blob:r,assetName:s.assetName,assetType:o}}async function Ge(t,e,s){const{blob:o,assetType:r,assetName:n}=t;let a=null;try{const i=await Ee({data:o,name:n},e.url,s);l(s),a={assetType:r,assetUploadId:i.itemID}}catch(i){ie(i),es().warnOnce(`Service ${e.url} does not support the REST Uploads API.`)}if(!a){const i=await ce(o);if(l(s),!i.isBase64)throw new be;a={assetType:r,assetData:i.data}}if(!a)throw new Te;return{item:a,assetName:n}}function Je(t,e,s){const o=w(t.length,s?.onProgress,"prepareAssetItems");return Promise.all(t.map(async(r,n)=>{const a=Ge(await r,e,{...s,onProgress:o.makeOnProgress(n)});return l(s),a}))}async function We(t,e,s){const o=k(s?.onProgress);try{const r=await m(h(e.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(t)},method:"post",responseType:"json"});if(l(s),r.data.uploadResults.length!==t.length)throw new ye(t.length,r.data.uploadResults.length);return r.data}finally{o.remove()}}function Ke(t,e,s){const{success:o}=e;if(!o){const{error:d}=e;throw new Pe(t.assetName,d)}const{assetHash:r}=e,{assetName:n,item:{assetType:a}}=t,{infoFor3D:{supportedFormats:i}}=s,u=ae(a,i);if(!u)throw new I(a);return new D(n,u,[new E(`${s.parsedUrl.path}/assets/${r}`,r)])}async function Ve(t,e,s){const o=t.map(({assetName:n,parts:a})=>({assetName:n,assetHash:a[0].partHash}));let r;try{const n=h(e.parsedUrl.path,"convert3D"),a=e.capabilities?.operations.supportsAsyncConvert3D;r=(await(a?Ye:Qe)(n,{query:{f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:s,async:a},responseType:"json",timeout:0})).data}catch{throw new he}return Xe(e,r)}function Xe(t,e){const s={source:e.assets.map(o=>{const r=re(o.contentType,t.infoFor3D.supportedFormats);if(!r)throw new I(r);return new D(o.assetName,o.contentType,[new E(o.assetURL,o.assetHash)])}),origin:void 0,transform:void 0};if(A("enable-feature:georeferenced-uploads")&&e.transform){if(s.transform=Ae(e.transform),e.spatialReference){const o=ne.fromJSON(e.spatialReference);s.origin=$e(e.transform,o)}}else s.transform=we(t.spatialReference);return s}function Qe(t,e){return m(t,e)}async function Ye(t,e){const s=(await m(t,e)).data.statusUrl;for(;;){const o=(await m(s,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return m(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await oe(ss)}}function Ze(t){return!!t.infoFor3D&&!!t.url}function B({infoFor3D:t}){const e=se(t);if(!e)throw new ge;return e}function es(){return le.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const ss=$(1e3);export{ds as uploadAssets};
