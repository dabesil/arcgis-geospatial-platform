import{ag as _,s as I,bI as K,bJ as tt,bK as R,bL as et,aX as L,aj as nt,bM as st,bN as at,bO as it}from"./index-B9tlkxep.js";function W(t){if(!t)return null;const n=t.wkid;if(n)return tt[n];const e=t.wkt2??t.wkt;return e?ot(e):null}function ot(t){const n=et.exec(t);if(!n||n.length!==2)return null;const e=n[1].split(",");if(!e||e.length<3)return null;const c=parseFloat(e[1]),s=parseFloat(e[2]);return isNaN(c)||isNaN(s)?null:{a:c,f:s===0?0:1/s}}function C(t){const n=W(t);if(rt(n))return n;const e=n.a*(1-n.f);return Object.assign(n,{b:e,eSq:1-(e/n.a)**2,radius:(2*n.a+e)/3,densificationRatio:1e4/((2*n.a+e)/3)})}function rt(t){return t!=null&&"b"in t&&"eSq"in t&&"radius"in t}function O(t,n,e){const{a:c,eSq:s}=C(e),a=Math.sqrt(s),i=Math.sin(n[1]*R),l=c*n[0]*R;let r;return s>0?r=c*((1-s)*(i/(1-s*(i*i))-1/(2*a)*Math.log((1-a*i)/(1+a*i))))*.5:r=c*i,t[0]=l,t[1]=r,t}function E(t){return _(t)&&!!W(t)}function lt(t,n="square-meters"){if(t.some(i=>!E(i.spatialReference)))throw new I("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let i=0;i<t.length;i++){const l=t[i],r=l.spatialReference,{radius:h,densificationRatio:u}=C(r),o=h*u;e.push(ht(l,o))}const c=[],s=[0,0],a=[0,0];for(let i=0;i<e.length;i++){const{rings:l,spatialReference:r}=e[i];let h=0;for(let u=0;u<l.length;u++){const o=l[u];O(s,o[0],r),O(a,o[o.length-1],r);let M=a[0]*s[1]-s[0]*a[1];for(let g=0;g<o.length-1;g++)O(s,o[g+1],r),O(a,o[g],r),M+=a[0]*s[1]-s[0]*a[1];h+=M}h=K(h,"square-meters",n),c.push(h/-2)}return c}function ut(t,n="meters"){if(!t)throw new I("geodesic-lengths:invalid-geometries","the input geometries type is not supported");if(t.some(c=>!E(c.spatialReference)))throw new I("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let c=0;c<t.length;c++){const s=t[c],{spatialReference:a}=s,i=s.type==="polyline"?s.paths:s.rings;let l=0;for(let r=0;r<i.length;r++){const h=i[r];let u=0;for(let o=1;o<h.length;o++){const M=h[o-1][0],g=h[o][0],m=h[o-1][1],d=h[o][1];if(m!==d||M!==g){const p=new X;B(p,[M,m],[g,d],a),u+=p.distance}}l+=u}l=K(l,"meters",n),e.push(l)}return e}function ht(t,n){if(t.type!=="polyline"&&t.type!=="polygon")throw new I("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:e}=t;if(!E(e))throw new I("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const c=t.type==="polyline"?t.paths:t.rings,s=[],a=[0,0],i=new X;for(const r of c){const h=[];s.push(h),h.push([r[0][0],r[0][1]]);let u,o,M=r[0][0],g=r[0][1];for(let m=0;m<r.length-1;m++){if(u=r[m+1][0],o=r[m+1][1],M===u&&g===o)continue;const d=[M,g];B(i,[M,g],[u,o],e);const{azimuth:p,distance:b}=i,w=b/n;if(w>1){for(let A=1;A<=w-1;A++)U(a,d,p,A*n,e),h.push(a.slice());U(a,d,p,(b+Math.floor(w-1)*n)/2,e),h.push(a.slice())}U(a,d,p,b,e),h.push(a.slice()),M=a[0],g=a[1]}}const l=st(L,e);return t.type==="polyline"?new at({paths:s,spatialReference:l}):new it({rings:s,spatialReference:l})}class X{constructor(n=0,e=void 0,c=void 0){this.distance=n,this.azimuth=e,this.reverseAzimuth=c}}function U(t,n,e,c,s){const a=n[0],i=n[1],l=a*R,r=i*R,h=(e??0)*R,{a:u,b:o,f:M}=C(s),g=Math.sin(h),m=Math.cos(h),d=(1-M)*Math.tan(r),p=1/Math.sqrt(1+d*d),b=d*p,w=Math.atan2(d,m),A=p*g,$=A*A,q=1-$,f=q*(u*u-o*o)/(o*o),k=1+f/16384*(4096+f*(f*(320-175*f)-768)),x=f/1024*(256+f*(f*(74-47*f)-128));let v,j,y,z=c/(o*k),F=2*Math.PI;for(;Math.abs(z-F)>1e-12;)y=Math.cos(2*w+z),v=Math.sin(z),j=Math.cos(z),F=z,z=c/(o*k)+x*v*(y+x/4*(j*(2*y*y-1)-x/6*y*(4*v*v-3)*(4*y*y-3)));const N=b*v-p*j*m,S=Math.atan2(b*j+p*v*m,(1-M)*Math.sqrt($+N*N)),P=M/16*q*(4+M*(4-3*q)),G=Math.atan2(v*g,p*j-b*v*m)-(1-P)*M*A*(z+P*v*(y+P*j*(2*y*y-1)));return t[0]=(l+G)/R,t[1]=S/R,t}function B(t,n,e,c){const s=n[0]*R,a=n[1]*R,i=e[0]*R,l=e[1]*R,{a:r,b:h,f:u,radius:o}=C(c),M=i-s,g=Math.atan((1-u)*Math.tan(a)),m=Math.atan((1-u)*Math.tan(l)),d=Math.sin(g),p=Math.cos(g),b=Math.sin(m),w=Math.cos(m);let A,$,q,f,k,x,v,j,y,z,F=1e3,N=M;do{if(v=Math.sin(N),j=Math.cos(N),q=Math.sqrt(w*v*(w*v)+(p*b-d*w*j)*(p*b-d*w*j)),q===0)return t.distance=0,t.azimuth=void 0,t.reverseAzimuth=void 0,t;k=d*b+p*w*j,x=Math.atan2(q,k),y=p*w*v/q,$=1-y*y,f=k-2*d*b/$,isNaN(f)&&(f=0),z=u/16*$*(4+u*(4-3*$)),A=N,N=M+(1-z)*u*y*(x+z*q*(f+z*k*(2*f*f-1)))}while(Math.abs(N-A)>1e-12&&--F>0);if(F===0){const Q=o,T=Math.acos(Math.sin(a)*Math.sin(l)+Math.cos(a)*Math.cos(l)*Math.cos(i-s))*Q,J=i-s,V=Math.sin(J)*Math.cos(l),Y=Math.cos(a)*Math.sin(l)-Math.sin(a)*Math.cos(l)*Math.cos(J),Z=Math.atan2(V,Y);return t.azimuth=Z/R,t.distance=T,t.reverseAzimuth=void 0,t}const S=$*(r*r-h*h)/(h*h),P=S/1024*(256+S*(S*(74-47*S)-128)),G=h*(1+S/16384*(4096+S*(S*(320-175*S)-768)))*(x-P*q*(f+P/4*(k*(2*f*f-1)-P/6*f*(4*q*q-3)*(4*f*f-3)))),D=Math.atan2(w*Math.sin(N),p*b-d*w*Math.cos(N)),H=Math.atan2(p*Math.sin(N),p*b*Math.cos(N)-d*w);return t.azimuth=D/R,t.distance=G,t.reverseAzimuth=H/R,t}function ft(t){return E(t)?t:nt(t)?L.WGS84:null}export{ft as N,ut as R,X as b,U as j,B as q,lt as v,E as y};
