import{a0 as r,jj as D,jk as A,jl as H,cQ as V,bT as Y,bR as G,i_ as J,bx as Z,i$ as tt,j0 as et,j1 as st,j2 as ot,bV as it,j3 as rt,j4 as at,bX as nt,jm as pt,jn as L}from"./index-DZKbNDrL.js";import{r as dt}from"./vec3f32-nZdmKIgz.js";import{n as ht}from"./WGLContainer-DLLIFM4R.js";import{o as lt}from"./FeatureCommandQueue-hlB2SsWB.js";import{t as U}from"./utils-ehcGqGxa.js";import{j as ut,_ as E,p as ct,X as ft,C as w,Y as vt,a as mt,w as yt,h as q,g as n,r as xt,U as wt,m as B,b as gt,P as N,v as _t,t as Mt}from"./GraphShaderModule-DA3c8CT_.js";import{e as bt}from"./TechniqueType-uMFRS8dR.js";import{t as W}from"./VertexElementDescriptor-BLyltQyJ.js";class P extends gt{}r([q(0,w)],P.prototype,"pos",void 0),r([q(1,w)],P.prototype,"uv",void 0);class St extends _t{}class k extends N{}r([n(xt)],k.prototype,"dvs",void 0);class m extends N{}r([n(w)],m.prototype,"perspective",void 0),r([n(w)],m.prototype,"texSize",void 0),r([n(E)],m.prototype,"wrapAroundShift",void 0),r([n(E)],m.prototype,"opacity",void 0),r([n(wt)],m.prototype,"texture",void 0);class x extends ut{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),s=new E(1).add(ct(t,this.config.perspective)),o=new ft(e.pos.add(new w(this.config.wrapAroundShift,0)),1),i=this.transform.dvs.multiply(o);return{uv:t,glPosition:new vt(i.xy.multiply(s),0,s)}}fragment(e){const t=mt(this.config.texture,e.uv).multiply(this.config.opacity),s=new yt;return s.fragColor=t,s}}r([n(k)],x.prototype,"transform",void 0),r([n(m)],x.prototype,"config",void 0),r([D(0,B(P))],x.prototype,"vertex",null),r([D(0,B(St))],x.prototype,"fragment",null);class $t extends Mt{constructor(){super(...arguments),this.type=bt.Overlay,this._mesh=null,this.shaders={overlay:new x}}render(e,t){const{context:s,painter:o}=e,i=this._getMesh(e,t);o.setPipelineState(U);const{isWrapAround:p,wrapAroundShift:u}=t.config,c={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:c},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...U,stencil:{write:!1,test:{compare:H.EQUAL,op:{fail:A.KEEP,zFail:A.KEEP,zPass:A.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,i),p&&(c.wrapAroundShift=u,o.submitDrawMeshUntyped(s,f,i))}shutdown(){V(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.buffer.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new lt(s,{vertex:{positions:{data:t.position,attributes:[new W("pos",2,G.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new W("uv",2,G.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:Y.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}}class It extends ht{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=J(),this._overlayTechnique=new $t}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==Z.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:i,resolution:p,rotation:u,viewpoint:c,displayMat3:f}=t;if(this._viewStateId===s)return;const g=L(u),d=i*o[0],v=i*o[1];this._localOrigin=c.targetGeometry.clone();const{x:y,y:b}=this._localOrigin,_=tt(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=b;const S=p*d,$=p*v,a=et(this._dvsMat3);st(a,a,f),ot(a,a,it(d/2,v/2)),rt(a,a,dt(d/S,-v/$,1)),at(a,a,-g),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:i,worldScreenWidth:p,size:u,viewpoint:c}=s,f=this._localOrigin;let g,d=0;const v=nt(i);if(v&&i.isWrappable){const y=u[0],b=u[1],_=L(o),S=Math.abs(Math.cos(_)),$=Math.abs(Math.sin(_)),a=Math.round(y*S+b*$),[T,C]=v.valid,h=pt(i),{x:I,y:F}=c.targetGeometry,K=[I,F],j=[0,0];s.toScreen(j,K);const M=[0,0];let O;O=a>p?.5*p:.5*a;const z=Math.floor((I+.5*h)/h),Q=T+z*h,X=C+z*h,R=[j[0]+O,0];s.toMap(M,R),M[0]>X&&(d=h),R[0]=j[0]-O,s.toMap(M,R),M[0]<Q&&(d=-h),g={worldWidth:h,xBounds:[T,C]}}for(const y of t)y.updateDrawCoords(f,d,i,g)}}export{It as u};
