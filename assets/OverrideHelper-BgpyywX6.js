import{ab as b,s as C,gY as I,gZ as v,g_ as O,N as y,g$ as h,h0 as x,h1 as g,h2 as S,h3 as k,h4 as N,dB as P}from"./index-DZKbNDrL.js";import{B as T,H as $,D as w,C as G}from"./quantizationUtils-BpNpb_IQ.js";function M(c,e,r,t,s){if(c==null)return null;const a=c.references("geometry")&&s?E(e,t,s):e,o=c.repurposeFeature(a);try{return c.evaluate({...r,$feature:o},c.services)}catch(i){return b.getLogger("esri.views.2d.support.arcadeOnDemand").warn("Feature arcade evaluation failed:",i),null}}const m=new Map;function E(c,e,r){const{transform:t,hasZ:s,hasM:a}=r;m.has(e)||m.set(e,A(e));const o=m.get(e)(c.geometry,t,s,a);return{...c,geometry:o}}function A(c){const e={};switch(c){case"esriGeometryPoint":return(r,t,s,a)=>G(t,e,r,s,a);case"esriGeometryPolygon":return(r,t,s,a)=>w(t,e,r,s,a);case"esriGeometryPolyline":return(r,t,s,a)=>$(t,e,r,s,a);case"esriGeometryMultipoint":return(r,t,s,a)=>T(t,e,r,s,a);default:return b.getLogger("esri.views.2d.support.arcadeOnDemand").error(new C("mapview-arcade",`Unable to handle geometryType: ${c}`)),r=>r}}const R=Object.freeze(Object.defineProperty({__proto__:null,default:M},Symbol.toStringTag,{value:"Module"})),L=c=>{if(!c)return[0,0,0,0];const{r:e,g:r,b:t,a:s}=c;return[e,r,t,255*s]};class n{static findApplicableOverrides(e,r,t){if(e&&r){if(e.primitiveName){let s=!1;for(const a of t)if(a.primitiveName===e.primitiveName){s=!0;break}if(!s)for(const a of r)a.primitiveName===e.primitiveName&&t.push(a)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const s of e.effects)n.findApplicableOverrides(s,r,t);if(e.symbolLayers)for(const s of e.symbolLayers)n.findApplicableOverrides(s,r,t);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":case"CIMSolidFill":case"CIMPictureFill":case"CIMHatchFill":case"CIMGradientFill":case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":if(e.effects)for(const s of e.effects)n.findApplicableOverrides(s,r,t);if(e.markerPlacement&&n.findApplicableOverrides(e.markerPlacement,r,t),e.type==="CIMVectorMarker"){if(e.markerGraphics)for(const s of e.markerGraphics)n.findApplicableOverrides(s,r,t),n.findApplicableOverrides(s.symbol,r,t)}else e.type==="CIMCharacterMarker"?n.findApplicableOverrides(e.symbol,r,t):e.type==="CIMHatchFill"?n.findApplicableOverrides(e.lineSymbol,r,t):e.type==="CIMPictureMarker"&&n.findApplicableOverrides(e.animatedSymbolProperties,r,t)}}}static findEffectOverrides(e,r){if(!e)return null;if(e.type==="CIMGeometricEffectDashes"&&I(e),!r||!e.primitiveName)return{type:"cim-effect-param",effect:e,overrides:[]};const t=v(e),s=e.primitiveName,a=[];for(const o of r)o.primitiveName===s&&a.push(v(o));return{type:"cim-effect-param",effect:t,overrides:O(a)}}static async resolveSymbolOverrides(e,r,t,s,a,o,i){if(!e?.symbol)return null;let{symbol:p,primitiveOverrides:l}=e;const u=!!l;if(!u&&!s)return p;p=y(p),l=y(l);let d=!0;if(r||(r={attributes:{}},d=!1),u){if(d||(l=l.filter(f=>!f.valueExpressionInfo?.expression.includes("$feature"))),i||(l=l.filter(f=>!f.valueExpressionInfo?.expression.includes("$view"))),l.length>0){const f={spatialReference:t,fields:h(r.attributes),geometryType:a};await n.createRenderExpressions(l,f),n.evaluateOverrides(l,r,a??"esriGeometryPoint",o,i)}n.applyOverrides(p,l)}return s&&n.applyDictionaryTextOverrides(p,r,s,null),p}static async createRenderExpressions(e,r){const t=[];for(const s of e){const a=s.valueExpressionInfo;if(!a||n._expressionToRenderExpression.has(a.expression))continue;const o=x(a.expression,r.spatialReference,r.fields);t.push(o),o.then(i=>n._expressionToRenderExpression.set(a.expression,i))}t.length>0&&await Promise.all(t)}static evaluateOverrides(e,r,t,s,a){const o={$view:{scale:a?.scale}};for(const i of e){i.value&&typeof i.value=="object"&&g(i.value)&&(i.propertyName==="Color"||i.propertyName==="StrokeColor")&&(i.value=L(i.value));const p=i.valueExpressionInfo;if(!p)continue;const l=n._expressionToRenderExpression.get(p.expression);l&&(i.value=M(l,r,o,t,s))}}static applyDictionaryTextOverrides(e,r,t,s,a="Normal"){if(e?.type)switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":case"CIMTextSymbol":{const o=e.symbolLayers;if(!o)return;for(const i of o)i&&i.type==="CIMVectorMarker"&&n.applyDictionaryTextOverrides(i,r,t,s,e.type==="CIMTextSymbol"?e.textCase:a)}break;case"CIMVectorMarker":{const o=e.markerGraphics;if(!o)return;for(const i of o)i&&n.applyDictionaryTextOverrides(i,r,t,s)}break;case"CIMMarkerGraphic":{const o=e.textString;if(o&&o.includes("[")){const i=S(o,t);e.textString=k(r,i,s,a)}}}}static applyOverrides(e,r,t,s){if(e.primitiveName){for(const a of r)if(a.primitiveName===e.primitiveName){const o=N(a.propertyName);if(s&&s.push({cim:e,nocapPropertyName:o,value:e[o]}),t){let i=!1;for(const p of t)p.primitiveName===e.primitiveName&&(i=!0);i||t.push(a)}a.value!=null&&(e[o]=a.value)}}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const a of e.effects)n.applyOverrides(a,r,t,s);if(e.symbolLayers)for(const a of e.symbolLayers)n.applyOverrides(a,r,t,s);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMSolidFill":case"CIMVectorMarker":if(e.effects)for(const a of e.effects)n.applyOverrides(a,r,t,s);if(e.type==="CIMVectorMarker"&&e.markerGraphics)for(const a of e.markerGraphics)n.applyOverrides(a,r,t,s),n.applyOverrides(a.symbol,r,t,s)}}static restoreOverrides(e){for(const r of e)r.cim[r.nocapPropertyName]=r.value}static buildOverrideKey(e){let r="";for(const t of e)t.value!==void 0&&(r+=`${t.primitiveName}${t.propertyName}${JSON.stringify(t.value)}`);return r}static toValue(e,r){if(e==="DashTemplate")return r.split(" ").map(t=>Number(t));if(e==="Color"){const t=new P(r).toRgba();return t[3]*=255,t}return r}}n._expressionToRenderExpression=new Map;const V=Object.freeze(Object.defineProperty({__proto__:null,OverrideHelper:n},Symbol.toStringTag,{value:"Module"}));export{V as O,R as c,n as y};
