import{A as s,s as m,N as p}from"./index-jfgqsXUF.js";import{p as n}from"./MeshVertexAttributes-DZDLxqNl.js";import{B as c}from"./vertexSpaceConversion-eXHzhsCp.js";import"./vendor-0HVaVRtn.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-DmhJunCd.js";import"./computeTranslationToOriginAndRotation-LGm6tkGQ.js";import"./projectPointToVector-BY6hJskn.js";import"./meshVertexSpaceUtils-D5B0HD8J.js";import"./MeshLocalVertexSpace-DG6YgaxH.js";import"./vec3-Dr99OneO.js";import"./BufferView-ZEWrKkx_.js";import"./vec4-BkKhYd-q.js";async function S(t,r,o){await Promise.resolve(),s(o);const e=c(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{S as convertMeshVertexSpace};
