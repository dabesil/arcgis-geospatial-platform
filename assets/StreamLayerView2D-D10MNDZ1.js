import{a0 as s,a1 as o,hh as d,a2 as h,cK as u,s as m,hf as l,c4 as y,O as c,ey as _}from"./index-jfgqsXUF.js";import{n as g,d as f}from"./FeatureLayerView2D-DYcHynar.js";import"./vendor-0HVaVRtn.js";import"./featureConversionUtils-BAN7iPzO.js";import"./OptimizedFeature-CQnDPIV2.js";import"./memoryEstimations-BucWCUN2.js";import"./OptimizedGeometry-aBFBEGLw.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./timeSupport-B9xIVbIO.js";import"./AttributeBinsFeatureSet-B6JveiyT.js";import"./AttributeBinsQuery-D4S88z_X.js";import"./queryUtils-BqV_MD1M.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-4n3tUwwc.js";import"./LayerView-NqyHl1Bs.js";import"./Container-DjdrwIF4.js";import"./layerViewUtils-Lm2RRReK.js";import"./TechniqueInstance-DfXe2VIg.js";import"./UpdateTracking2D-CfFEleC8.js";import"./Utils-DufyKz9p.js";import"./BoundingBox-izu4TMBJ.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject--4ZHTLY2.js";import"./VertexArrayObject-CLpjg57p.js";import"./TileContainer-DR76myUC.js";import"./WGLContainer-WFylH3LE.js";import"./ProgramTemplate-YrOnZ5NE.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-BTt3Vg0H.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-BWsQvzDU.js";import"./CIMSymbolHelper-DaggyRNO.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-nqDekxUm.js";import"./GeometryUtils-CpMv2FgV.js";import"./rasterizingUtils-qR64sKPW.js";import"./floatRGBA-Dairvywp.js";import"./Rect-CUzevAry.js";import"./TechniqueType-uMFRS8dR.js";import"./GraphShaderModule-BOY5wPZW.js";import"./ShaderBuilder-DfMB-k6o.js";import"./BindType-BBwFZqyN.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-CI9vbH7V.js";import"./CircularArray-CujHzHWW.js";import"./SDFHelper-BAZ0ETXF.js";import"./constants-B4mRqufT.js";import"./parquet-Dv2OZ0jl.js";import"./popupUtils-CD96T0ud.js";import"./RefreshableLayerView-BwYQfjaS.js";const v=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([o()],t.prototype,"_isUserPaused",void 0),s([o({readOnly:!0})],t.prototype,"connectionStatus",null),s([o({type:d})],t.prototype,"filter",void 0),t=s([h("esri.views.layers.StreamLayerView")],t),t};let n=class extends v(f){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([u(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),u(()=>this.layer.purgeOptions,()=>this._update()),u(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new m("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return l(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return y(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new m("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return g(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(p=>{const a=c.fromJSON(p);return a.features.forEach(i=>{i.layer=this.layer,i.sourceLayer=this.layer}),a}),new c({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(_)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([o()],n.prototype,"pipelineConnectionStatus",void 0),s([o()],n.prototype,"pipelineErrorString",void 0),s([o({readOnly:!0})],n.prototype,"connectionError",null),s([o({readOnly:!0})],n.prototype,"_streamConnectionStatus",null),n=s([h("esri.views.2d.layers.StreamLayerView2D")],n);const ge=n;export{ge as default};
