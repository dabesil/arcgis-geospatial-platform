const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/imageryUtils-DLMoevnS.js","assets/utils-pX4H7R-b.js","assets/index-B9tlkxep.js","assets/vendor-0HVaVRtn.js","assets/index-CDFczaSZ.css","assets/originUtils-CPX8CCAY.js","assets/multiOriginJSONSupportUtils-C0wm8_Yw.js","assets/jsonContext-B0yUoiRM.js","assets/saveUtils-SBzP_mdW.js"])))=>i.map(i=>d[i]);
import{N as V,oM as Wt,lL as Zt,T as S,a0 as i,a1 as n,fD as D,a2 as w,aT as ce,z as $,aX as re,fL as Qe,aV as Vt,sg as we,sh as at,si as nt,ec as k,aZ as U,bO as ft,cm as Ue,c9 as E,aY as Y,aW as Kt,a$ as Xt,b0 as Tt,O as At,cn as Yt,bM as A,Q as J,c8 as G,c7 as z,P as I,eY as gt,a7 as je,ch as er,ih as tr,fe as rr,e6 as ir,sj as sr,I as ar,ab as Pt,s as b,R as mt,cK as nr,a8 as or,kx as lr,dq as ur,fE as pr,dr as cr,f4 as mr,f5 as dr,f3 as yr,fg as hr,ff as fr,f6 as gr,ds as wr,g9 as vr,_ as Rr,hV as ke,bj as br,ia as Sr,fJ as xr,f8 as Ir,ii as Fr,cM as Dr}from"./index-B9tlkxep.js";import{o as jr,m as Tr,c as Nr,q as Pr,e as Cr,$ as Or,j as _r,b as $r,t as Fe,r as dt,f as Mr,v as Vr,p as Ar,h as Jr,V as qr,n as Er,s as Gr,k as zr}from"./rasterFieldUtils-CTtX3sIF.js";import{w as F,f as B,g as Lr,c as Ur,p as Hr,l as Br,a as Qr,t as kr,B as Wr,L as Zr,U as Kr,q as Xr,e as Yr}from"./ImageHistogramParameters-DuuQlrg6.js";import{S as Jt,f as qt,g as ei,v as ti,A as ri,a as ge,w as He,e as De,n as ii,d as Et,_ as si,j as Ct,P as ai}from"./RasterSymbolizer-COwrsk9M.js";import{t as Ot}from"./imageBitmapUtils-hmmNkk_5.js";import{g as yt,s as ni,l as oi}from"./dataUtils-DfqIwZBT.js";import{f as _t,p as li,c as ui,o as pi}from"./RasterPresetRendererMixin-DOkE8h3f.js";import{a as ci,s as mi}from"./executeForIds-DPm_8e_T.js";import{s as di}from"./executeQueryJSON-D39XH0bW.js";import"./vendor-0HVaVRtn.js";import"./ClassBreaksDefinition-b8HhHfP8.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./query-COrFWVdl.js";import"./pbfQueryUtils-DiB9ezXP.js";import"./pbf-CwrvXk2T.js";import"./memoryEstimations-CfiaYUy-.js";import"./OptimizedGeometry-3yaiiwEe.js";import"./OptimizedFeature-BRI6IeKu.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";const yi={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}},hi=new Set(["u1","u2","u4","u8","s8","u16","s16"]),fi={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},gi=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function Gt(s){return gi.has(s.type)}function wt(s,t){if(!s||!t)return V(s||t);const o=V(s);if(o.functionDefinition&&t.rasterFunctionDefinition){const e=t.rasterFunctionDefinition;(e.thumbnail||e.thumbnailEx)&&(e.thumbnail=e.thumbnailEx=void 0),zt(o.functionDefinition.arguments,t),o.rasterFunctionDefinition=o.functionDefinition.toJSON()}else t.functionName?.toLowerCase()!=="none"&&(Lt(o.functionArguments).Raster=t);return o}function zt(s,t){for(const o in s)o.toLowerCase()==="raster"&&(s[o].type==="RasterFunctionVariable"?(s[o]=t.rasterFunctionDefinition,s[o].type="RasterFunctionTemplate"):s[o].type==="RasterFunctionTemplate"&&zt(s[o].arguments,t))}function ie(s){const t=V(yi[s.functionName+"Function"]),o=s.functionArguments;for(const e in o)e.toLowerCase()==="raster"?(t.arguments[e]=ie(o[e]),t.arguments[e].type="RasterFunctionTemplate"):e.toLowerCase()==="colormap"?(t.arguments[e].value=Fi(o[e]),t.arguments.ColorSchemeType.value=0):t.arguments[e].value=o[e];return t}function wi(s,t){switch(t=t||{},s.type){case"raster-stretch":return bi(s,t);case"class-breaks":return Si(s,t);case"unique-value":return xi(s,t);case"raster-colormap":return Ii(s,t);case"vector-field":return vi(s,t);case"raster-shaded-relief":return Ri(s,t);case"flow":throw new Error("Unsupported rendering rule.")}}function Lt(s){const t=s?.Raster??s?.raster;return t&&t.declaredClass==="esri.layers.support.RasterFunction"?Lt(t.functionArguments):s}const Je={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function vi(s,t){const o=new F;o.functionName="VectorFieldRenderer";const{dataType:e,bandNames:r}=t,a=e==="vector-uv";let l,u;if(r&&r.length===2){const f=r.map(v=>v.toLowerCase());l=f.indexOf("magnitude"),u=f.indexOf("direction")}l!==-1&&l!==null||(l=0,u=1);const p=s.rotationType==="arithmetic"?1:2,m=s.flowRepresentation==="flow-from"?0:1,c=s.visualVariables?s.visualVariables.find(f=>f.field==="Magnitude"):new Wt,d={magnitudeBandID:l,directionBandID:u,isUVComponents:a,referenceSystem:p,massFlowAngleRepresentation:m,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:fi[s.style.toLowerCase().replace("-","_")],minimumMagnitude:c.minDataValue,maximumMagnitude:c.maxDataValue,minimumSymbolSize:c.minSize,maximumSymbolSize:c.maxSize};o.functionArguments=d;const h=ie(o);return t.convertToRFT?F.fromJSON({rasterFunctionDefinition:h}):o}function Ri(s,t){const o=t.convertToRFT;if(t.dataType!=="elevation"&&(t.dataType!=="generic"||t.bandCount!==1||t.pixelType!=="s16"&&t.pixelType!=="s32"&&t.pixelType!=="f32"&&t.pixelType!=="f64"))return new F;const e=new F;e.functionName="Hillshade";const r=s.hillshadeType==="traditional"?0:1,a=s.scalingType==="none"?1:3,l={HillshadeType:r,SlopeType:a,ZFactor:s.zFactor};return r===0&&(l.Azimuth=s.azimuth,l.Altitude=s.altitude),a===3&&(l.PSPower=s.pixelSizePower,l.PSZFactor=s.pixelSizeFactor),e.functionArguments=l,e.variableName="Raster",s.colorRamp&&(e.functionName="ShadedRelief",o?l.ColorRamp=Jt(s.colorRamp):l.Colormap=qt(s.colorRamp)),o?new F({rasterFunctionDefinition:ie(e)}):e}function bi(s,t){const o=t.convertToRFT,e=new F;e.functionName="Stretch";const r=Je[ei.toJSON(s.stretchType)],a="u8",l=s.customStatistics?.map(p=>[p.min,p.max,p.avg??0,p.stddev??1]),u={StretchType:r,Statistics:l,DRA:s.dynamicRangeAdjustment,UseGamma:s.useGamma,Gamma:s.gamma,ComputeGamma:s.computeGamma};if(s.outputMin!=null&&(u.Min=s.outputMin),s.outputMax!=null&&(u.Max=s.outputMax),r===Je.standardDeviation?(u.NumberOfStandardDeviations=s.numberOfStandardDeviations,e.outputPixelType=a):r===Je.percentClip?(u.MinPercent=s.minPercent,u.MaxPercent=s.maxPercent,e.outputPixelType=a):r===Je.minMax?e.outputPixelType=a:r===Je.sigmoid&&(u.SigmoidStrengthLevel=s.sigmoidStrengthLevel),e.functionArguments=u,e.variableName="Raster",s.colorRamp){const p=s.colorRamp,m=new F;if(o)m.functionArguments={ColorRamp:Jt(p)};else{const c=ti(p,!0);if(c)m.functionArguments={colorRampName:c};else if(!t.convertColorRampToColormap||p.type!=="algorithmic"&&p.type!=="multipart"){const d=s.colorRamp.toJSON();d.type==="algorithmic"?d.algorithm=d.algorithm||"esriCIELabAlgorithm":d.type==="multipart"&&d.colorRamps?.length&&d.colorRamps.forEach(h=>h.algorithm=h.algorithm||"esriCIELabAlgorithm"),m.functionArguments={colorRamp:d}}else m.functionArguments={Colormap:qt(p)}}return m.variableName="Raster",m.functionName="Colormap",m.functionArguments.Raster=e,o?new F({rasterFunctionDefinition:ie(m)}):m}return o?new F({rasterFunctionDefinition:ie(e)}):e}function Si(s,t){const o=[],e=[],r=[],a=[],{pixelType:u,rasterAttributeTable:p}=t,m=p==null?null:p.features,c=Ut(p);if(c&&m&&Array.isArray(m)&&s.classBreakInfos){s.classBreakInfos.forEach((g,R)=>{const T=g.symbol?.color;let P;T?.a&&g.minValue!=null&&g.maxValue!=null&&m.forEach(C=>{g.minValue!=null&&g.maxValue!=null&&(P=C.attributes[s.field],(P>=g.minValue&&P<g.maxValue||R===s.classBreakInfos.length-1&&P>=g.minValue)&&a.push([C.attributes[c],T.r,T.g,T.b]))})});const v=u?ot(a,u):a,y=new F;return y.functionName="Colormap",y.functionArguments={},y.functionArguments.Colormap=v,y.variableName="Raster",t.convertToRFT?new F({rasterFunctionDefinition:ie(y)}):y}s.classBreakInfos.forEach((v,y)=>{if(v.minValue==null||v.maxValue==null)return;const g=v.symbol&&v.symbol.color;g?.a?(y===0?o.push(v.minValue,v.maxValue+1e-4):o.push(v.minValue+1e-4,v.maxValue+1e-4),e.push(y),a.push([y,g.r,g.g,g.b])):r.push(v.minValue,v.maxValue)});const d=u?ot(a,u):a,h=new F;h.functionName="Remap",h.functionArguments={InputRanges:o,OutputValues:e,NoDataRanges:r},h.variableName="Raster";const f=new F;return f.functionName="Colormap",f.functionArguments={Colormap:d,Raster:h},t.convertToRFT?new F({rasterFunctionDefinition:ie(f)}):f}function ot(s,t){const o=hi.has(t)?Zt(t):null;return o&&s.push([Math.floor(o[0]-1),0,0,0],[Math.ceil(o[1]+1),0,0,0]),s}function Ut(s){if(s==null)return;const{fields:t}=s;return t?.find(e=>e?.name&&e.name.toLowerCase()==="value")?.name}function xi(s,t){const o=[],{pixelType:e,rasterAttributeTable:r}=t,a=r==null?null:r.features,l=Ut(r),u=s.defaultSymbol?.color?.toRgb(),p=s.uniqueValueInfos;if(p)if(a){if(l){const d=new Map;p.forEach(f=>{const v=f.value,y=$t(f);v!=null&&y?.a&&d.set(String(v),y.toRgb())});const h=s.field;h&&a.forEach(({attributes:f})=>{const v=String(f[h]),y=f[l],g=d.get(v);g?o.push([y,...g]):u&&o.push([y,...u])})}}else for(let d=0;d<p.length;d++){const h=p[d],f=$t(h),v=+h.value;if(f?.a){if(isNaN(v))return null;o.push([v,f.r,f.g,f.b])}}const m=e?ot(o,e):o,c=new F;return c.functionName="Colormap",c.functionArguments={},c.functionArguments.Colormap=m,c.variableName="Raster",t.convertToRFT?new F({rasterFunctionDefinition:ie(c)}):c}function $t(s){return s.symbol?.type==="polygon-3d"?s.symbol.symbolLayers?.find(t=>t.type==="fill")?.material?.color:s.symbol?.color}function Ii(s,t){const o=s.extractColormap();if(!o||o.length===0)return null;const{pixelType:e}=t,r=e?ot(o,e):o,a=new F;return a.functionName="Colormap",a.functionArguments={},a.functionArguments.Colormap=r,t.convertToRFT?new F({rasterFunctionDefinition:ie(a)}):a}function Fi(s){const t=[],o=[];return s.forEach(e=>{t.push(e[0]),o.push(ri([...e.slice(1),255]))}),{type:"RasterColormap",values:t,colors:o}}let O=class extends S{constructor(){super(...arguments),this.layer=null,this.compression=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(t,o,e){this.layer.version<10.3||(o[e]=t)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(t,o,e){this.format&&this.format.toLowerCase().includes("jpg")&&t!=null&&(o[e]=t)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(t,o,e){this.format==="lerc"&&t!=null&&(o[e]=t)}get format(){return this.layer.renderer?.type==="vector-field"?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}get pixelType(){const{layer:t}=this;return t.pixelType!==t.serviceRasterInfo.pixelType?t.pixelType:void 0}writeLercVersion(t,o,e){this.format==="lerc"&&this.layer.version>=10.5&&(o[e]=t)}get version(){const t=this.layer;return t.commitProperty("bandIds"),t.commitProperty("format"),t.commitProperty("compressionQuality"),t.commitProperty("compressionTolerance"),t.commitProperty("interpolation"),t.commitProperty("noData"),t.commitProperty("noDataInterpretation"),t.commitProperty("mosaicRule"),t.commitProperty("rasterFunction"),t.commitProperty("adjustAspectRatio"),t.commitProperty("pixelFilter"),t.commitProperty("pixelType"),t.commitProperty("definitionExpression"),t.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(t){this._set("version",t)}get mosaicRule(){const t=this.layer;let o=t.mosaicRule;const e=t.definitionExpression;return o?e&&e!==o.where&&(o=o.clone(),o.where=e):e&&(o=new B({where:e})),o}get rasterFunction(){const t=this.layer;let{rasterFunction:o}=t;const e=t.pixelFilter,r=!t.format||t.format.includes("jpg")||t.format.includes("png");o=this._addResampleRasterFunction(o);const a=t.multidimensionalSubset?.areaOfInterest;return a&&(o=Di(o,a)),r&&!e&&t.renderer?.type!=="vector-field"&&(o=this.combineRendererWithRenderingRule(o)),o}combineRendererWithRenderingRule(t){const o=this.layer,{rasterInfo:e,renderer:r}=o;return t=t||o.rasterFunction,!r||!Gt(r)?t:wt(wi(r,{rasterAttributeTable:e.attributeTable,pixelType:e.pixelType,dataType:e.dataType,bandNames:e.bandInfos.map(({name:a})=>a),convertColorRampToColormap:o.version<10.6,convertToRFT:!!t?.rasterFunctionDefinition,bandCount:e.bandCount}),t)}_addResampleRasterFunction(t){if(this.layer.renderer?.type!=="vector-field"||t?.functionName==="Resample")return t;const o=this.layer.serviceDataType==="esriImageServiceDataTypeVector-UV"?7:10,e=this.layer.serviceRasterInfo.pixelSize;let r=new F({functionName:"Resample",functionArguments:{ResamplingType:o,InputCellSize:e}});return r=t?.rasterFunctionDefinition?new F({rasterFunctionDefinition:ie(r)}):r,wt(r,t)}};function Di(s,t){const o=new F({functionName:"Clip",functionArguments:{ClippingGeometry:t.toJSON(),ClippingType:1}});return wt(o,s)}i([n()],O.prototype,"layer",void 0),i([n({json:{write:!0}})],O.prototype,"adjustAspectRatio",null),i([D("adjustAspectRatio")],O.prototype,"writeAdjustAspectRatio",null),i([n({json:{write:!0}})],O.prototype,"bandIds",null),i([n({json:{write:!0}})],O.prototype,"compression",void 0),i([n({json:{write:!0}})],O.prototype,"compressionQuality",null),i([D("compressionQuality")],O.prototype,"writeCompressionQuality",null),i([n({json:{write:!0}})],O.prototype,"compressionTolerance",null),i([D("compressionTolerance")],O.prototype,"writeCompressionTolerance",null),i([n({json:{write:!0}})],O.prototype,"format",null),i([n({type:String,json:{read:{reader:ge.read},write:{writer:ge.write}}})],O.prototype,"interpolation",null),i([n({json:{write:!0}})],O.prototype,"noData",null),i([n({type:String,json:{read:{reader:He.read},write:{writer:He.write}}})],O.prototype,"noDataInterpretation",null),i([n({type:De.apiValues,json:{read:De.read,write:De.write}})],O.prototype,"pixelType",null),i([n({json:{write:!0}})],O.prototype,"lercVersion",void 0),i([D("lercVersion")],O.prototype,"writeLercVersion",null),i([n({type:Number})],O.prototype,"version",null),i([n({json:{write:!0}})],O.prototype,"mosaicRule",null),i([n({json:{write:!0,name:"renderingRule"}})],O.prototype,"rasterFunction",null),O=i([w("esri.layers.support.ExportImageServiceParameters")],O);let de=class extends ce.ClonableMixin(S){constructor(){super(...arguments),this.fromGeometry=null,this.toGeometry=null,this.objectIds=null,this.where=null,this.maxCount=null}};i([n({type:$,json:{read:!0}})],de.prototype,"fromGeometry",void 0),i([n({type:$,json:{read:!0,write:!0}})],de.prototype,"toGeometry",void 0),i([n({json:{write:!0}})],de.prototype,"objectIds",void 0),i([n({type:String,json:{write:!0}})],de.prototype,"where",void 0),i([n({type:Number,json:{write:!0}})],de.prototype,"maxCount",void 0),de=i([w("esri.rest.support.FindImagesParameters")],de);const ji=de,Ht=s=>{let t=class extends s{constructor(){super(...arguments),this.make=null,this.model=null,this.focalLength=null,this.pixelSize=null,this.rows=null,this.cols=null}};return i([n({json:{write:!0}})],t.prototype,"make",void 0),i([n({json:{write:!0}})],t.prototype,"model",void 0),i([n({json:{write:!0}})],t.prototype,"focalLength",void 0),i([n({json:{write:!0}})],t.prototype,"pixelSize",void 0),i([n({json:{write:!0}})],t.prototype,"rows",void 0),i([n({json:{write:!0}})],t.prototype,"cols",void 0),t=i([w("esri.rest.support.CameraInfoMixin")],t),t};let W=class extends Ht(S){constructor(){super(...arguments),this.id=null,this.referenceUri=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.perspectiveCenter=null,this.orientation=null}writeAcquisitionDate(t,o){o.acquisitionDate=t?.getTime()}};i([n({json:{write:!0}})],W.prototype,"id",void 0),i([n({json:{name:"uri",write:!0}})],W.prototype,"referenceUri",void 0),i([n({type:Date,json:{write:!0}})],W.prototype,"acquisitionDate",void 0),i([D("acquisitionDate")],W.prototype,"writeAcquisitionDate",null),i([n({json:{write:!0}})],W.prototype,"cameraID",void 0),i([n({type:$,json:{write:!0}})],W.prototype,"center",void 0),i([n({type:$,json:{write:!0}})],W.prototype,"perspectiveCenter",void 0),i([n({json:{write:!0}})],W.prototype,"orientation",void 0),W=i([w("esri.rest.support.ImageInspectionInfo")],W);const Ti=W;let We=class extends S{constructor(){super(...arguments),this.images=null}};i([n({type:[Ti],json:{write:!0}})],We.prototype,"images",void 0),We=i([w("esri.rest.support.FindImagesResult")],We);const Ni=We;var vt;let be=vt=class extends S{constructor(s){super(s),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new vt(V({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};i([n({type:[String],json:{name:"angleName",write:!0}})],be.prototype,"angleNames",void 0),i([n({type:$,json:{write:!0}})],be.prototype,"point",void 0),i([n({type:re,json:{write:!0}})],be.prototype,"spatialReference",void 0),i([n({type:Qe,json:{write:!0}})],be.prototype,"rasterId",void 0),be=vt=i([w("esri.rest.support.ImageAngleParameters")],be);const Pi=be;let Te=class extends S{constructor(t){super(t),this.north=null,this.up=null,this.spatialReference=null}};i([n({type:Number,json:{write:!0}})],Te.prototype,"north",void 0),i([n({type:Number,json:{write:!0}})],Te.prototype,"up",void 0),i([n({type:re,json:{write:!0}})],Te.prototype,"spatialReference",void 0),Te=i([w("esri.rest.support.ImageAngleResult")],Te);const Ci=Te,Q=new Vt({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let fe=class extends S{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};i([n({type:Number,json:{read:!0,write:!0}})],fe.prototype,"value",void 0),i([n({type:String,json:{read:!0,write:!0}})],fe.prototype,"displayValue",void 0),i([n({type:Number,json:{read:!0,write:!0}})],fe.prototype,"uncertainty",void 0),fe=i([w("esri.rest.support.imageMeasureUtils.BaseImageMeasureResultValue")],fe);let _e=class extends fe{constructor(){super(...arguments),this.unit=null}};i([n({type:String,json:{read:we.read,write:we.write}})],_e.prototype,"unit",void 0),_e=i([w("esri.rest.support.imageMeasureUtils.ImageMeasureResultLengthValue")],_e);let Ze=class extends fe{constructor(){super(...arguments),this.unit=null}};i([n({type:String,json:{read:at.read,write:at.write}})],Ze.prototype,"unit",void 0),Ze=i([w("esri.rest.support.imageMeasureUtils.ImageMeasureResultAreaValue")],Ze);let Be=class extends fe{constructor(){super(...arguments),this.unit=null}};i([n({type:String,json:{read:nt.read,write:nt.write}})],Be.prototype,"unit",void 0),Be=i([w("esri.rest.support.imageMeasureUtils.ImageMeasureResultAngleValue")],Be);let ye=class extends S{constructor(t){super(t),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.pixelSize=null,this.raster=void 0}};i([n()],ye.prototype,"type",void 0),i([n({type:Q.apiValues,json:{read:Q.read,write:Q.write}})],ye.prototype,"measureOperation",void 0),i([n({type:B,json:{write:!0}})],ye.prototype,"mosaicRule",void 0),i([n({type:$,json:{write:!0}})],ye.prototype,"pixelSize",void 0),i([n({json:{write:!0}})],ye.prototype,"raster",void 0),ye=i([w("esri.rest.support.BaseImageMeasureParameters")],ye);const lt=ye;var Rt;let ae=Rt=class extends lt{constructor(){super(...arguments),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(s,t,o){s!=null&&(t.geometryType=k(s),t[o]=s.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new Rt(V({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([n({types:U,json:{name:"fromGeometry",read:!0,write:!0}})],ae.prototype,"geometry",void 0),i([D("geometry")],ae.prototype,"writeGeometry",null),i([n({type:Q.apiValues,json:{write:Q.write}})],ae.prototype,"measureOperation",null),i([n({json:{read:!0}})],ae.prototype,"is3D",void 0),i([n({type:String,json:{read:we.read,write:we.write}})],ae.prototype,"linearUnit",void 0),i([n({type:String,json:{read:at.read,write:at.write}})],ae.prototype,"areaUnit",void 0),ae=Rt=i([w("esri.rest.support.ImageAreaParameters")],ae);const Oi=ae;let qe=class extends S{constructor(t){super(t),this.name=null,this.sensorName=null}};i([n({type:String,json:{read:!0,write:!0}})],qe.prototype,"name",void 0),i([n({type:String,json:{read:!0,write:!0}})],qe.prototype,"sensorName",void 0),qe=i([w("esri.rest.support.BaseImageMeasureResult")],qe);const ut=qe;let Ee=class extends ut{constructor(){super(...arguments),this.area=null,this.perimeter=null}};i([n({type:Ze,json:{read:!0,write:!0}})],Ee.prototype,"area",void 0),i([n({type:_e,json:{read:!0,write:!0}})],Ee.prototype,"perimeter",void 0),Ee=i([w("esri.rest.support.ImageAreaResult")],Ee);const _i=Ee;let Ke=class extends ce.ClonableMixin(S){constructor(){super(...arguments),this.outSpatialReference=null}};i([n({type:re,json:{name:"outSR",write:!0}})],Ke.prototype,"outSpatialReference",void 0),Ke=i([w("esri.rest.support.ImageBoundaryParameters")],Ke);const $i=Ke;let Ne=class extends S{constructor(){super(...arguments),this.area=null,this.geometry=null}readGeometry(t,o){return t==null?null:t.rings?ft.fromJSON(t):Ue.fromJSON(t)}};i([n({type:Number,json:{write:!0}})],Ne.prototype,"area",void 0),i([n({types:U,json:{name:"shape",write:!0}})],Ne.prototype,"geometry",void 0),i([E("geometry")],Ne.prototype,"readGeometry",null),Ne=i([w("esri.rest.support.ImageBoundaryResult")],Ne);const Mi=Ne;var bt;let te=bt=class extends lt{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(s,t,o){s!=null&&(t.geometryType=k(s),t[o]=s.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new bt(V({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([n({type:$,json:{read:!0,write:!0}})],te.prototype,"fromGeometry",void 0),i([D("fromGeometry")],te.prototype,"writeFromGeometry",null),i([n({type:$,json:{read:!0,write:!0}})],te.prototype,"toGeometry",void 0),i([n({type:Q.apiValues,json:{write:Q.write}})],te.prototype,"measureOperation",null),i([n({json:{read:!0}})],te.prototype,"is3D",void 0),i([n({type:String,json:{read:we.read,write:we.write}})],te.prototype,"linearUnit",void 0),i([n({type:String,json:{read:nt.read,write:nt.write}})],te.prototype,"angularUnit",void 0),te=bt=i([w("esri.rest.support.ImageDistanceParameters")],te);const Vi=te;let Pe=class extends ut{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};i([n({type:_e,json:{read:!0,write:!0}})],Pe.prototype,"distance",void 0),i([n({type:Be,json:{read:!0,write:!0}})],Pe.prototype,"azimuthAngle",void 0),i([n({type:Be,json:{read:!0,write:!0}})],Pe.prototype,"elevationAngle",void 0),Pe=i([w("esri.rest.support.ImageDistanceResult")],Pe);const Ai=Pe;let ne=class extends ce.ClonableMixin(S){constructor(){super(...arguments),this.geometry=null,this.objectIds=null,this.spatialRelationship="intersects",this.timeExtent=null,this.where=null}writeGeometry(t,o,e){t!=null&&(o.geometryType=k(t),o[e]=JSON.stringify(t.toJSON()))}};i([n({types:U,json:{read:Y,write:!0}})],ne.prototype,"geometry",void 0),i([D("geometry")],ne.prototype,"writeGeometry",null),i([n({json:{write:!0}})],ne.prototype,"objectIds",void 0),i([Kt(Xt,{ignoreUnknown:!1,name:"spatialRel"})],ne.prototype,"spatialRelationship",void 0),i([n({type:Tt,json:{name:"time",write:!0}})],ne.prototype,"timeExtent",void 0),i([n({type:String,json:{write:!0}})],ne.prototype,"where",void 0),ne=i([w("esri.rest.support.ImageGPSInfoParameters")],ne);const Ji=ne;let Xe=class extends Ht(S){constructor(){super(...arguments),this.id=null}};i([n({json:{write:!0}})],Xe.prototype,"id",void 0),Xe=i([w("esri.rest.support.CameraInfo")],Xe);const qi=Xe;let Z=class extends S{constructor(){super(...arguments),this.id=null,this.name=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.gps=null,this.orientation=null}writeAcquisitionDate(t,o){o.acquisitionDate=t?.getTime()}};i([n({json:{write:!0}})],Z.prototype,"id",void 0),i([n({json:{write:!0}})],Z.prototype,"name",void 0),i([n({type:Date,json:{write:!0}})],Z.prototype,"acquisitionDate",void 0),i([D("acquisitionDate")],Z.prototype,"writeAcquisitionDate",null),i([n({json:{write:!0}})],Z.prototype,"cameraID",void 0),i([n({type:$,json:{write:!0}})],Z.prototype,"center",void 0),i([n({json:{write:!0}})],Z.prototype,"gps",void 0),i([n({json:{write:!0}})],Z.prototype,"orientation",void 0),Z=i([w("esri.rest.support.ImageGPSInfo")],Z);const Ei=Z;let Ge=class extends S{constructor(){super(...arguments),this.images=null,this.cameras=null}};i([n({type:[Ei],json:{write:!0}})],Ge.prototype,"images",void 0),i([n({type:[qi],json:{write:!0}})],Ge.prototype,"cameras",void 0),Ge=i([w("esri.rest.support.ImageGPSInfoResult")],Ge);const Gi=Ge;var St;let oe=St=class extends lt{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(s,t,o){s!=null&&(t.geometryType=k(s),t[o]=s.toJSON())}get measureOperation(){return this.operationType}clone(){return new St(V({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([n({type:$,json:{read:!0}})],oe.prototype,"fromGeometry",void 0),i([D("fromGeometry")],oe.prototype,"writeFromGeometry",null),i([n({type:$,json:{read:!0,write:!0}})],oe.prototype,"toGeometry",void 0),i([n({type:Q.apiValues,json:{write:Q.write}})],oe.prototype,"measureOperation",null),i([n({json:{read:!0}})],oe.prototype,"operationType",void 0),i([n({type:String,json:{read:we.read,write:we.write}})],oe.prototype,"linearUnit",void 0),oe=St=i([w("esri.rest.support.ImageHeightParameters")],oe);const zi=oe;let Ye=class extends ut{constructor(){super(...arguments),this.height=null}};i([n({type:_e,json:{read:!0,write:!0}})],Ye.prototype,"height",void 0),Ye=i([w("esri.rest.support.ImageHeightResult")],Ye);const Li=Ye;var xt;let _=xt=class extends S{constructor(){super(...arguments),this.geometry=null,this.rasterFunctions=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(s,t,o){s!=null&&(t.geometryType=k(s),t[o]=JSON.stringify(s.toJSON()))}set mosaicRule(s){let t=s;t?.mosaicMethod&&(t=B.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}writeMosaicRule(s,t,o){s!=null&&(t[o]=JSON.stringify(s.toJSON()))}set rasterFunction(s){let t=s;t?.rasterFunction&&(t=F.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}writeRasterFunction(s,t,o){s!=null&&(t[o]=JSON.stringify(s.toJSON())),s.rasterFunctionDefinition&&(t[o]=JSON.stringify(s.rasterFunctionDefinition))}writeRasterFunctions(s,t,o){s!=null&&(t[o]=JSON.stringify(s.map(e=>e.rasterFunctionDefinition||e.toJSON())))}writePixelSize(s,t,o){s!=null&&(t[o]=JSON.stringify(s))}writeTimeExtent(s,t,o){if(s!=null){const e=s.start!=null?s.start.getTime():null,r=s.end!=null?s.end.getTime():null;t[o]=e!=null?r!=null?`${e},${r}`:`${e}`:null}}clone(){return new xt(V({geometry:this.geometry,mosaicRule:this.mosaicRule,rasterFunction:this.rasterFunction,rasterFunctions:this.rasterFunctions,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};i([n({types:U,json:{write:!0}})],_.prototype,"geometry",void 0),i([D("geometry")],_.prototype,"writeGeometry",null),i([n({type:B,json:{write:!0}})],_.prototype,"mosaicRule",null),i([D("mosaicRule")],_.prototype,"writeMosaicRule",null),i([n({type:F,json:{write:!0,name:"renderingRule"}})],_.prototype,"rasterFunction",null),i([D("rasterFunction")],_.prototype,"writeRasterFunction",null),i([n({type:[F],json:{write:!0,name:"renderingRules"}})],_.prototype,"rasterFunctions",void 0),i([D("rasterFunctions")],_.prototype,"writeRasterFunctions",null),i([n({type:$,json:{write:!0}})],_.prototype,"pixelSize",void 0),i([D("pixelSize")],_.prototype,"writePixelSize",null),i([n({type:Boolean,json:{write:!0}})],_.prototype,"returnGeometry",void 0),i([n({type:Boolean,json:{write:!0}})],_.prototype,"returnCatalogItems",void 0),i([n({type:Boolean,json:{write:!0}})],_.prototype,"returnPixelValues",void 0),i([n({type:Number,json:{write:!0}})],_.prototype,"maxItemCount",void 0),i([n({type:Tt,json:{write:{target:"time"}}})],_.prototype,"timeExtent",void 0),i([D("timeExtent")],_.prototype,"writeTimeExtent",null),i([n({json:{write:!0}})],_.prototype,"raster",void 0),i([n({json:{write:!0}})],_.prototype,"viewId",void 0),i([n({type:Boolean,json:{write:!0}})],_.prototype,"processAsMultidimensional",void 0),_=xt=i([w("esri.rest.support.ImageIdentifyParameters")],_);const Bt=_;let K=class extends S{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};i([n({json:{write:!0}})],K.prototype,"catalogItemVisibilities",void 0),i([n({type:At,json:{write:!0}})],K.prototype,"catalogItems",void 0),i([n({type:$,json:{write:!0}})],K.prototype,"location",void 0),i([n({json:{write:!0}})],K.prototype,"name",void 0),i([n({json:{write:!0}})],K.prototype,"objectId",void 0),i([n({json:{write:!0}})],K.prototype,"processedValues",void 0),i([n({json:{write:!0}})],K.prototype,"properties",void 0),i([n({json:{write:!0}})],K.prototype,"value",void 0),K=i([w("esri.rest.support.ImageIdentifyResult")],K);const Ui=K;var It;let Ce=It=class extends S{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(s,t,o){t.geometries={geometryType:"esriGeometryPoint",geometries:s.map(e=>e.toJSON())}}clone(){return new It({geometries:this.geometries?.map(s=>s.clone())??[],rasterId:this.rasterId})}};i([n({type:[$],json:{write:!0}})],Ce.prototype,"geometries",void 0),i([D("geometries")],Ce.prototype,"writeGeometry",null),i([n({type:Qe,json:{write:!0}})],Ce.prototype,"rasterId",void 0),Ce=It=i([w("esri.rest.support.ImagePixelLocationParameters")],Ce);const Hi=Ce;let et=class extends S{constructor(){super(...arguments),this.geometries=null}};i([n({json:{write:!0}})],et.prototype,"geometries",void 0),et=i([w("esri.rest.support.ImagePixelLocationResult")],et);const Bi=et;var Ft;let Se=Ft=class extends lt{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(s,t,o){s!=null&&(t.geometryType=k(s),t[o]=s.toJSON())}get measureOperation(){const{is3D:s,geometry:t}=this;return t.type==="point"?s?"point-3D":"point":s?"centroid-3D":"centroid"}clone(){return new Ft(V({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([n({types:U,json:{name:"fromGeometry",read:Y}})],Se.prototype,"geometry",void 0),i([D("geometry")],Se.prototype,"writeGeometry",null),i([n({type:Q.apiValues,json:{read:Q.read,write:Q.write}})],Se.prototype,"measureOperation",null),i([n({json:{read:!0}})],Se.prototype,"is3D",void 0),Se=Ft=i([w("esri.rest.support.ImagePointParameters")],Se);const Qi=Se;let tt=class extends ut{constructor(){super(...arguments),this.point=null}};i([n({type:$,json:{name:"point.value",read:!0,write:!0}})],tt.prototype,"point",void 0),tt=i([w("esri.rest.support.ImagePointResult")],tt);const ki=tt;var Dt;let q=Dt=class extends S{constructor(){super(...arguments),this.geometry=null,this.interpolation="nearest",this.mosaicRule=null,this.outFields=null,this.pixelSize=null,this.raster=void 0,this.returnFirstValueOnly=!0,this.sampleDistance=null,this.sampleCount=null,this.sliceId=null,this.timeExtent=null}writeGeometry(s,t,o){s!=null&&(t.geometryType=k(s),t[o]=s.toJSON())}set locations(s){if(s?.length){const t=new Yt({spatialReference:s[0].spatialReference,points:s.map(({x:o,y:e})=>[o,e])});this._set("locations",s),this.geometry=t}}clone(){return new Dt(V({geometry:this.geometry,locations:this.locations,interpolation:this.interpolation,mosaicRule:this.mosaicRule,outFields:this.outFields,raster:this.raster,returnFirstValueOnly:this.returnFirstValueOnly,sampleDistance:this.sampleDistance,sampleCount:this.sampleCount,sliceId:this.sliceId,pixelSize:this.pixelSize,timeExtent:this.timeExtent}))}};i([n({types:U,json:{read:Y}})],q.prototype,"geometry",void 0),i([D("geometry")],q.prototype,"writeGeometry",null),i([n({type:[$]})],q.prototype,"locations",null),i([n({type:String,json:{type:ge.jsonValues,read:ge.read,write:ge.write}})],q.prototype,"interpolation",void 0),i([n({type:B,json:{write:!0}})],q.prototype,"mosaicRule",void 0),i([n({type:[String],json:{write:!0}})],q.prototype,"outFields",void 0),i([n({type:$,json:{write:!0}})],q.prototype,"pixelSize",void 0),i([n({type:String,json:{write:!0}})],q.prototype,"raster",void 0),i([n({type:Boolean,json:{write:!0}})],q.prototype,"returnFirstValueOnly",void 0),i([n({type:Number,json:{write:!0}})],q.prototype,"sampleDistance",void 0),i([n({type:Number,json:{write:!0}})],q.prototype,"sampleCount",void 0),i([n({type:Number,json:{write:!0}})],q.prototype,"sliceId",void 0),i([n({type:Tt,json:{read:{source:"time"},write:{target:"time"}}})],q.prototype,"timeExtent",void 0),q=Dt=i([w("esri.rest.support.ImageSampleParameters")],q);const Wi=q;let le=class extends S{constructor(){super(...arguments),this.attributes=null,this.location=null,this.locationId=null,this.rasterId=null,this.resolution=null,this.pixelValue=null}};i([n({json:{write:!0}})],le.prototype,"attributes",void 0),i([n({type:$,json:{write:!0}})],le.prototype,"location",void 0),i([n({json:{write:!0}})],le.prototype,"locationId",void 0),i([n({json:{write:!0}})],le.prototype,"rasterId",void 0),i([n({json:{write:!0}})],le.prototype,"resolution",void 0),i([n({json:{write:!0}})],le.prototype,"pixelValue",void 0),le=i([w("esri.rest.support.ImageSample")],le);const Zi=le;let rt=class extends S{constructor(){super(...arguments),this.samples=[]}};i([n({type:[Zi],json:{write:!0}})],rt.prototype,"samples",void 0),rt=i([w("esri.rest.support.ImageSampleResult")],rt);const Ki=rt;let xe=class extends ce.ClonableMixin(S){constructor(){super(...arguments),this.geometries=[],this.rasterIds=null,this.outSpatialReference=null}writeGeometries(t,o,e){o.geometries=t?.length?{geometryType:k(t[0]),geometries:t.map(r=>({...r.toJSON(),spatialReference:void 0}))}:null}};i([n({types:[U]})],xe.prototype,"geometries",void 0),i([D("geometries")],xe.prototype,"writeGeometries",null),i([n({type:[Qe],json:{write:!0}})],xe.prototype,"rasterIds",void 0),i([n({type:re,json:{name:"outSR",write:!0}})],xe.prototype,"outSpatialReference",void 0),xe=i([w("esri.rest.support.ImageToMapMultirayParameters")],xe);const Xi=xe;let ue=class extends ce.ClonableMixin(S){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.outSpatialReference=null,this.depthOffset=0,this.adjust=!1}writeGeometry(t,o,e){t!=null&&(o.geometryType=k(t),o[e]={...t.toJSON(),spatialReference:void 0})}};i([n({types:U,json:{read:Y,write:!0}})],ue.prototype,"geometry",void 0),i([D("geometry")],ue.prototype,"writeGeometry",null),i([n({json:{write:!0}})],ue.prototype,"rasterId",void 0),i([n({type:re,json:{name:"outSR",write:!0}})],ue.prototype,"outSpatialReference",void 0),i([n({json:{name:"options.DOff",write:!0}})],ue.prototype,"depthOffset",void 0),i([n({json:{name:"options.Adjust",write:!0}})],ue.prototype,"adjust",void 0),ue=i([w("esri.rest.support.ImageToMapParameters")],ue);const Yi=ue;let ze=class extends ce.ClonableMixin(S){constructor(){super(...arguments),this.referenceUri=null,this.rasterId=null}};i([n({type:String,json:{name:"uri",write:!0}})],ze.prototype,"referenceUri",void 0),i([n({type:Number,json:{write:!0}})],ze.prototype,"rasterId",void 0),ze=i([w("esri.rest.support.ImageUrlParameters")],ze);const es=ze;let it=class extends S{constructor(){super(...arguments),this.url=null}};i([n({json:{name:"imageURL",write:!0}})],it.prototype,"url",void 0),it=i([w("esri.rest.support.ImageUrlResult")],it);const ts=it,ht=new Vt({0:"constant",1:"plane",2:"minimum",3:"maximum",4:"average"},{useNumericKeys:!0});let pe=class extends ce.ClonableMixin(S){constructor(){super(...arguments),this.geometries=[],this.mosaicRule=null,this.pixelSize=null,this.constantZ=null,this.baseType="plane"}writeGeometries(s,t,o){s?.length&&(t.geometryType=k(s[0]),t.geometries=s.map(e=>e.toJSON()))}};i([n({types:[U]})],pe.prototype,"geometries",void 0),i([D("geometries")],pe.prototype,"writeGeometries",null),i([n({type:B,json:{write:!0}})],pe.prototype,"mosaicRule",void 0),i([n({type:$,json:{write:!0}})],pe.prototype,"pixelSize",void 0),i([n({json:{write:!0}})],pe.prototype,"constantZ",void 0),i([n({type:ht.apiValues,json:{read:ht.read,write:ht.write}})],pe.prototype,"baseType",void 0),pe=i([w("esri.rest.support.ImageVolumeParameters")],pe);const rs=pe;let X=class extends S{constructor(){super(...arguments),this.area=null,this.cut=null,this.fill=null,this.maxZ=null,this.minZ=null,this.meanZ=null,this.cutCellCount=null,this.fillCellCount=null}};i([n({json:{write:!0}})],X.prototype,"area",void 0),i([n({json:{write:!0}})],X.prototype,"cut",void 0),i([n({json:{write:!0}})],X.prototype,"fill",void 0),i([n({json:{name:"maxz",write:!0}})],X.prototype,"maxZ",void 0),i([n({json:{name:"minz",write:!0}})],X.prototype,"minZ",void 0),i([n({json:{name:"meanz",write:!0}})],X.prototype,"meanZ",void 0),i([n({json:{write:!0}})],X.prototype,"cutCellCount",void 0),i([n({json:{write:!0}})],X.prototype,"fillCellCount",void 0),X=i([w("esri.rest.support.ImageVolume")],X);const is=X;let st=class extends S{constructor(){super(...arguments),this.volumes=[]}};i([n({type:[is],json:{write:!0}})],st.prototype,"volumes",void 0),st=i([w("esri.rest.support.ImageVolumeResult")],st);const ss=st;let Ie=class extends ce.ClonableMixin(S){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.visibleOnly=!1}writeGeometry(s,t,o){s!=null&&(t.geometryType=k(s),t[o]=JSON.stringify(s))}};i([n({types:U,json:{read:Y,write:!0}})],Ie.prototype,"geometry",void 0),i([D("geometry")],Ie.prototype,"writeGeometry",null),i([n({json:{write:!0}})],Ie.prototype,"rasterId",void 0),i([n({json:{name:"options.VisibleOnly",write:!0}})],Ie.prototype,"visibleOnly",void 0),Ie=i([w("esri.rest.support.MapToImageParameters")],Ie);const as=Ie;let he=class extends S{constructor(){super(...arguments),this.geometry=null,this.length=null,this.area=null,this.center=null}readCenter(t,o){return t.spatialReference||(t={...t,spatialReference:o.Shape.spatialReference}),$.fromJSON(t)}};i([n({types:U,json:{name:"Shape",read:Y,write:!0}})],he.prototype,"geometry",void 0),i([n({json:{name:"Length",write:!0}})],he.prototype,"length",void 0),i([n({json:{name:"Area",write:!0}})],he.prototype,"area",void 0),i([n({type:$,json:{name:"Center",write:!0}})],he.prototype,"center",void 0),i([E("center")],he.prototype,"readCenter",null),he=i([w("esri.rest.support.MeasureAreaFromImageResult")],he);const ns=he;var jt;let Oe=jt=class extends S{constructor(){super(...arguments),this.geometry=null,this.rasterId=void 0}writeGeometry(s,t,o){s!=null&&(t.geometryType=k(s),t[o]={...s.toJSON(),spatialReference:void 0})}clone(){const s=V({geometry:this.geometry,rasterId:this.rasterId});return new jt(s)}};i([n({types:U,json:{name:"fromGeometry",read:Y,write:!0}})],Oe.prototype,"geometry",void 0),i([D("geometry")],Oe.prototype,"writeGeometry",null),i([n({json:{write:!0}})],Oe.prototype,"rasterId",void 0),Oe=jt=i([w("esri.rest.support.MeasureFromImageParameters")],Oe);const os=Oe;let Le=class extends S{constructor(){super(...arguments),this.geometry=null,this.length=null}};i([n({types:U,json:{name:"Shape",read:Y,write:!0}})],Le.prototype,"geometry",void 0),i([n({json:{name:"Length",write:!0}})],Le.prototype,"length",void 0),Le=i([w("esri.rest.support.MeasureLengthFromImageResult")],Le);const ls=Le;function Nt(s){const t=s?.time;if(t&&(t.start!=null||t.end!=null)){const o=[];t.start!=null&&o.push(t.start),t.end==null||o.includes(t.end)||o.push(t.end),s.time=o.join(",")}}async function Qt(s,t,o){t=A(Lr,t);const e=J(s),r=t.geometry?[t.geometry]:[],a=await je(r),l=t.toJSON();Nt(l);const u=a?.[0];u!=null&&(l.geometry=se(u));const p=G({...e.query,f:"json",...l});return z(p,o)}async function us(s,t,o){const e=(t=A(rs,t)).toJSON();e.geometries=JSON.stringify(e.geometries);const r=J(s),a=G({...r.query,f:"json",...e}),l=z(a,o),{data:u}=await I(`${r.path}/calculateVolume`,l);return ss.fromJSON({volumes:u.results})}async function ps(s,t,o){const e=(t=A(Pi,t)).toJSON();e.angleName!=null&&(e.angleName=e.angleName.join(",")),t?.point?.spatialReference?.imageCoordinateSystem&&(e.point.spatialReference=ct(t.point.spatialReference)),t?.spatialReference?.imageCoordinateSystem&&(e.spatialReference=$e(t.spatialReference));const r=J(s),a=G({...r.query,f:"json",...e}),l=z(a,o),{data:u}=await I(`${r.path}/computeAngles`,l);return u.spatialReference=u.spatialReference?u.spatialReference.geodataXform!=null?new re({wkid:0,imageCoordinateSystem:u.spatialReference}):re.fromJSON(u.spatialReference):null,u.north==="NaN"&&(u.north=null),u.up==="NaN"&&(u.up=null),new Ci(u)}async function cs(s,t,o){const e=(t=A(Hi,t)).toJSON(),{geometries:r}=t;if(r)for(let m=0;m<r.length;m++)r[m].spatialReference?.imageCoordinateSystem&&(e.geometries.geometries[m].spatialReference=ct(r[m].spatialReference));const a=J(s),l=G({...a.query,f:"json",...e}),u=z(l,o),{data:p}=await I(`${a.path}/computePixelLocation`,u);return Bi.fromJSON(p)}async function ms(s,t,o){const e=await Qt(s,t,o),r=J(s),{data:a}=await I(`${r.path}/computeStatisticsHistograms`,e),{statistics:l}=a;return l?.length&&l.forEach(u=>{u.avg=u.mean,u.stddev=u.standardDeviation}),{statistics:l,histograms:a.histograms}}async function ds(s,t,o){const e=await Qt(s,t,o),r=J(s),{data:a}=await I(`${r.path}/computeHistograms`,e);return{histograms:a.histograms}}async function ys(s,t,o){const e=(t=A(Wi,t)).toJSON();Nt(e),e.outFields?.length&&(e.outFields=e.outFields.join(","));const r=await je(t.geometry),a=r?.[0];a!=null&&(e.geometry=se(a));const l=J(s),u=G({...l.query,f:"json",...e}),p=z(u,o),{data:m}=await I(`${l.path}/getSamples`,p),c=m.samples.map(d=>{const h=d.value==="NaN"||d.value===""?null:d.value.split(" ").map(f=>Number(f));return{...d,pixelValue:h}});return Ki.fromJSON({samples:c})}async function Mt(s,t,o){t=A(Bt,t);const e=J(s),r=t.geometry?[t.geometry]:[];return je(r).then(a=>{const l=t.toJSON(),u=a?.[0];u!=null&&(l.geometry=JSON.stringify(se(u)));const p=G({...e.query,f:"json",...l}),m=z(p,o);return I(e.path+"/identify",m)}).then(a=>Ui.fromJSON(a.data))}async function hs(s,t,o){t=A(zi,t);const e=await pt(s,t,[t.fromGeometry,t.toGeometry],o);return Li.fromJSON(e)}async function fs(s,t,o){t=A(Oi,t);const e=await pt(s,t,[t.geometry],o);return _i.fromJSON(e)}async function gs(s,t,o){t=A(Qi,t);const e=await pt(s,t,[t.geometry],o);return ki.fromJSON(e)}async function ws(s,t,o){t=A(Vi,t);const e=await pt(s,t,[t.fromGeometry,t.toGeometry],o);return Ai.fromJSON(e)}async function pt(s,t,o,e){const r=J(s),a=await je(o),l=t.toJSON();a[0]!=null&&(l.fromGeometry=JSON.stringify(se(a[0]))),a[1]!=null&&(l.toGeometry=JSON.stringify(se(a[1])));const u=G({...r.query,f:"json",...l}),p=z(u,e),{data:m}=await I(r.path+"/measure",p);return m}async function vs(s,t,o){const e=await kt(s,t,o);return ls.fromJSON(e)}async function Rs(s,t,o){const e=await kt(s,t,o);return ns.fromJSON(e)}async function kt(s,t,o){t=A(os,t);const e=J(s),r=t.toJSON(),a=G({...e.query,f:"json",...r}),l=z(a,o),{data:u}=await I(e.path+"/measureFromImage",l);return u}function se(s){const t=s.toJSON();return s.spatialReference?.imageCoordinateSystem&&(t.spatialReference=ct(s.spatialReference)),t}function ct(s){const{imageCoordinateSystem:t}=s;if(t){const{id:o,referenceServiceName:e}=t;return o!=null?e?{icsid:o,icsns:e}:{icsid:o}:{ics:t}}return s.toJSON()}function $e(s,t){if(!s.imageCoordinateSystem)return gt(s);const o=ct(s),{icsid:e,icsns:r}=o;return e==null||r!=null&&!t?.toLowerCase().includes("/"+r.toLowerCase()+"/")?JSON.stringify(o):`0:${e}`}async function bs(s,t,o){t=A($i,t);const e=J(s),r=t.toJSON();t.outSpatialReference&&(r.outSR=$e(t.outSpatialReference));const a=G({...e.query,f:"json",...r}),l=z(a,o),{data:u}=await I(e.path+"/queryBoundary",l);return Mi.fromJSON(u)}async function Ss(s,t,o){const e=(t=A(Ji,t)).toJSON();Nt(e),e.objectIds?.length&&(e.objectIds=e.objectIds.join(",")),e.geometry||e.objectIds||e.time||e.where||(e.where="1=1");const r=await je(t.geometry),a=r?.[0];a!=null&&(e.geometry=se(a));const l=a?.spatialReference??t.geometry?.spatialReference;l&&(e.inSR=$e(l));const u=J(s),p=G({...u.query,f:"json",...e}),m=z(p,o),{data:c}=await I(`${u.path}/queryGPSInfo`,m);return Gi.fromJSON(c)}async function xs(s,t,o){const e=(t=A(Yi,t)).toJSON();t.geometry.spatialReference.imageCoordinateSystem&&(e.geometry=se(t.geometry)),t.depthOffset&&t.adjust||delete e.options;const r=J(s),a=G({...r.query,f:"json",...e}),l=z(a,o),{data:u}=await I(`${r.path}/imageToMap`,l);return Y(u)}async function Is(s,t,o){const e=(t=A(Xi,t)).toJSON();t.rasterIds?.length&&(e.rasterIds=t.rasterIds.join(","));const r=J(s),a=G({...r.query,f:"json",...e}),l=z(a,o),{data:u}=await I(`${r.path}/imageToMapMultiray`,l);return Y(u)}async function Fs(s,t,o){const e=(t=A(as,t)).toJSON(),r=await je(t.geometry),a=r?.[0];a!=null&&(e.geometry=se(a)),t.visibleOnly||delete e.options;const l=a?.spatialReference??t.geometry?.spatialReference;l&&(e.inSR=$e(l));const u=J(s),p=G({...u.query,f:"json",...e}),m=z(p,o),{data:c}=await I(`${u.path}/mapToImage`,m);return Y(c)}async function Ds(s,t,o){const e=(t=A(es,t)).toJSON(),r=J(s),a=G({...r.query,f:"json",...e}),l=z(a,o),{data:u}=await I(`${r.path}/getImageUrl`,l);return ts.fromJSON(u)}async function js(s,t,o){const e=(t=A(ji,t)).toJSON(),r=await je([t.fromGeometry,t.toGeometry]);r[0]!=null&&(e.fromGeometry=se(r[0]),r[0].spatialReference&&(e.inSR=$e(r[0].spatialReference))),r[1]!=null&&(e.toGeometry=se(r[1])),t.objectIds?.length&&(e.objectIds=e.objectIds.join(","));const a=J(s),l=G({...a.query,f:"json",...e}),u=z(l,o),{data:p}=await I(`${a.path}/find`,u);return Ni.fromJSON(p)}async function Ts(s,t,o){const e=J(s),r=G({...e?.query,f:"json"}),a=z(r,o),l=`${e?.path}/${t}/info`,u=I(`${l}`,a),p=I(`${l}/keyProperties`,a),m=await Promise.allSettled([u,p]),c=m[0].status==="fulfilled"?m[0].value.data:null,d=m[1].status==="fulfilled"?m[1].value.data:null;let h=null;c.statistics?.length&&(h=c.statistics.map(C=>({min:C[0],max:C[1],avg:C[2],stddev:C[3]})));const f=Ue.fromJSON(c.extent),v=Math.ceil(f.width/c.pixelSizeX-.1),y=Math.ceil(f.height/c.pixelSizeY-.1),g=f.spatialReference,R=new $({x:c.pixelSizeX,y:c.pixelSizeY,spatialReference:g}),T=c.histograms?.length?c.histograms:null,P=new ii({origin:c.origin,blockWidth:c.blockWidth,blockHeight:c.blockHeight,firstPyramidLevel:c.firstPyramidLevel,maximumPyramidLevel:c.maxPyramidLevel});return new Et({width:v,height:y,bandCount:c.bandCount,extent:f,spatialReference:g,pixelSize:R,pixelType:c.pixelType.toLowerCase(),statistics:h,histograms:T,keyProperties:d,storageInfo:P})}const Ns=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),Ps=sr(lr,{min:0,max:255});function Cs(s){const t=JSON.stringify(s),o=t.includes('"rasterFunctionDefinition":{'),e=o?t.match(/"type":"(.*?FunctionArguments")/gi):t.match(/"rasterFunction":"(.*?")/gi),r=e?.map(a=>o?a.slice(8,-18):a.slice(18,-1));return r?r.join("/"):null}const Os=s=>{let t=class extends s{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._cachedRendererJson=null,this._serviceSupportsMosaicRule=null,this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new O({layer:this}))}readServiceSupportsMosaicRule(e,r){return this._isMosaicRuleSupported(r)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.length<1||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.forEach(r=>{e.set(r.name.toLowerCase().replaceAll(/ /gi,"_"),r.name)}),e}readBandIds(e,r){if(Array.isArray(e)&&e.length>0&&e.every(a=>typeof a=="number"))return e}readCapabilities(e,r){return this._readCapabilities(r)}writeCompressionQuality(e,r,a){e!=null&&this.format!=="lerc"&&(r[a]=e)}writeCompressionTolerance(e,r,a){this.format==="lerc"&&e!=null&&(r[a]=e)}readDefaultMosaicRule(e,r){return this._serviceSupportsMosaicRule?B.fromJSON(r):null}get fieldsIndex(){return this.fields?new ir(this.fields):null}set format(e){e&&Ns.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,r){return r.serviceDataType==="esriImageServiceDataTypeVector-UV"||r.serviceDataType==="esriImageServiceDataTypeVector-MagDir"||this.pixelFilter!=null?"lerc":"jpgpng"}readMinScale(e,r){return r.minLOD!=null&&r.maxLOD!=null?e:0}readMaxScale(e,r){return r.minLOD!=null&&r.maxLOD!=null?e:0}set mosaicRule(e){let r=e;r?.mosaicMethod&&(r=B.fromJSON({...r.toJSON(),mosaicMethod:r.mosaicMethod,mosaicOperation:r.mosaicOperation})),this._set("mosaicRule",r)}readMosaicRule(e,r){const a=e||r.mosaicRule;return a?B.fromJSON(a):this._isMosaicRuleSupported(r)?B.fromJSON(r):null}writeMosaicRule(e,r,a){const{mosaicRule:l}=this;this._isValidCustomizedMosaicRule(l)&&(r[a]=l.toJSON())}writeNoData(e,r,a){e!=null&&typeof e=="number"&&(r[a]=Ps(e))}readObjectIdField(e,r){return e||(e=r.fields.find(l=>l.type==="esriFieldTypeOID"||l.type==="oid")?.name),e}get parsedUrl(){return ar(this.url)}readSourceType(e,r){return this._isMosaicDataset(r)?"mosaic-dataset":"raster-dataset"}get renderer(){const{activePresetRendererName:e,presetRenderers:r}=this;return e?r?.find(({name:l})=>l===e)?.renderer.clone():this.internalRenderer}set renderer(e){this.activePresetRendererName=null,this.internalRenderer=e}set internalRenderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("internalRenderer",e)}readRenderer(e,r,a){const l=r?.layerDefinition?.drawingInfo?.renderer,u=Qr(l,a);return u==null?null:(u.type==="vector-field"&&r.symbolTileSize&&!l.symbolTileSize&&(u.symbolTileSize=r.symbolTileSize),Gt(u)||Pt.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),u)}writeRenderer(e,r,a){r.layerDefinition=r.layerDefinition||{},r.layerDefinition.drawingInfo=r.layerDefinition.drawingInfo||{},r.layerDefinition.drawingInfo.renderer=e.toJSON(),e.type==="vector-field"&&(r.symbolTileSize=e.symbolTileSize)}get rasterFields(){const e=this.fields?.map(l=>l.clone())??[];e.push(jr()),this.sourceType==="mosaic-dataset"&&this.fields?.length&&e.push(Tr()),this.version>=10.4&&this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.some(({name:l})=>l.toLowerCase()==="none")&&e.push(Nr()),this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.filter(({name:l})=>l.toLowerCase()!=="none").forEach(({name:l})=>e.push(Pr(l)));const{rasterInfo:r}=this;if(this._isVectorDataSet()){const l=r?.multidimensionalInfo?.variables[0].unit?.trim(),u=Cr(l),p=Or();e.push(u,p)}if(r?.multidimensionalInfo&&this.sourceType==="raster-dataset"){const l=_r(r.multidimensionalInfo);e.push(...l)}const a=r?.attributeTable;if(a!=null){const l=$r(a);e.push(...l)}return e}set rasterFunction(e){let r=e;r?.rasterFunction&&(r=F.fromJSON({...r.toJSON(),rasterFunction:r.rasterFunction,rasterFunctionArguments:r.rasterFunctionArguments})),this._set("rasterFunction",r)}readRasterFunction(e,r){const a=r.rasterFunctionInfos;return r.renderingRule||a?.length&&a[0].name!=="None"?this._isRFTJson(r.renderingRule)?F.fromJSON({rasterFunctionDefinition:r.renderingRule}):F.fromJSON(r.renderingRule||{rasterFunctionInfos:r.rasterFunctionInfos}):null}readSpatialReference(e,r){const a=e||r.extent.spatialReference;return a?re.fromJSON(a):null}writePixelType(e,r,a){this.serviceRasterInfo!=null&&this.pixelType===this.serviceRasterInfo.pixelType||(r[a]=De.toJSON(e))}readVersion(e,r){let a=r.currentVersion;return a||(a=r.hasOwnProperty("fields")||r.hasOwnProperty("timeInfo")?10:9.3),a}applyFilter(e){let r=e;return this.pixelFilter&&(r=this._clonePixelData(e),this.pixelFilter(r)),r}async applyRenderer(e,r){let a=e;const{renderer:l,symbolizer:u,pixelFilter:p,bandIds:m}=this;if(!this._isPicture()&&l&&u&&!p){const c=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(l.toJSON()),d=this._rasterJobHandler.instance;if(d){c&&(u.bind(),await d.updateSymbolizer(u,r),this._cachedRendererJson=l.toJSON());const h=await d.symbolize({bandIds:m,...e},r);a={extent:e.extent,pixelBlock:h}}else a={extent:e.extent,pixelBlock:u.symbolize({bandIds:m,...e})}}return a}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async calculateVolume(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsCalculateVolume)throw new b("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=V(e),this.mosaicRule&&e.mosaicRule==null&&(e.mosaicRule=this.mosaicRule),us(this.url,e,this._getRequestOptions(r))}async computeAngles(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsComputeAngles)throw new b("imagery-layer:compute-angles","this operation is not supported on the input image service");return ps(this.url,e,this._getRequestOptions(r))}async computePixelSpaceLocations(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsComputePixelLocation)throw new b("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return cs(this.url,e,this._getRequestOptions(r))}async computeHistograms(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsComputeHistograms)throw new b("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=V(e),this._applyMosaicAndRenderingRules(e),ds(this.url,e,this._getRequestOptions(r))}async computeStatisticsHistograms(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsComputeStatisticsHistograms)throw new b("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=V(e),this._applyMosaicAndRenderingRules(e),ms(this.url,e,this._getRequestOptions(r))}async measureHeight(e,r){const a=await this._fetchCapabilities(r?.signal);if(!(e.operationType==="base-and-top"?a.mensuration.supportsHeightFromBaseAndTop:e.operationType==="base-and-top-shadow"?a.mensuration.supportsHeightFromBaseAndTopShadow:a.mensuration.supportsHeightFromTopAndTopShadow))throw new b("imagery-layer:measure-height","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),hs(this.url,e,this._getRequestOptions(r))}async measureAreaAndPerimeter(e,r){const a=await this._fetchCapabilities(r?.signal);if(!(a.mensuration.supportsAreaAndPerimeter&&(!e.is3D||a.mensuration.supports3D)))throw new b("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),fs(this.url,e,this._getRequestOptions(r))}async measureDistanceAndAngle(e,r){const a=await this._fetchCapabilities(r?.signal);if(!(a.mensuration.supportsDistanceAndAngle&&(!e.is3D||a.mensuration.supports3D)))throw new b("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),ws(this.url,e,this._getRequestOptions(r))}async measurePointOrCentroid(e,r){const a=await this._fetchCapabilities(r?.signal);if(!(a.mensuration.supportsPointOrCentroid&&(!e.is3D||a.mensuration.supports3D)))throw new b("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),gs(this.url,e,this._getRequestOptions(r))}async measureLengthFromImage(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsMeasureFromImage)throw new b("imagery-layer:measure-length-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polyline")throw new b("imagery-layer:measure-length-from-image","this input geometry must be a polyline");return vs(this.url,e,this._getRequestOptions(r))}async measureAreaFromImage(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsMeasureFromImage)throw new b("imagery-layer:measure-area-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polygon")throw new b("imagery-layer:measure-area-from-image","this input geometry must be a polygon");return Rs(this.url,e,this._getRequestOptions(r))}getField(e){const{fieldsIndex:r}=this;return r?.get(e)}getFieldDomain(e,r){const a=this.getField(e);return a?a.domain:null}async fetchImage(e,r,a,l={}){if(e==null||r==null||a==null)throw new b("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");if(this.renderer||this.symbolizer){const d=await this._generateRasterInfo(this.rasterFunction,{signal:l.signal});d&&(this.rasterInfo=d)}const u=this.getExportImageServiceParameters(e,r,a,l.timeExtent);if(u==null){if(l.requestAsImageElement&&this._canRequestImageElement(this.format)){const R=document.createElement("canvas");return R.width=r,R.height=a,l.returnImageBitmap?{imageBitmap:await Ot(R,`${o(this.parsedUrl)}/exportImage`,l.signal)}:{imageOrCanvasElement:R}}const{bandIds:d,rasterInfo:h}=this,f=(d?.length||h.bandCount)??0,v=r*a,y=h.pixelType,g=[];for(let R=0;R<f;R++)g.push(yt.createEmptyBand(y,v));return{pixelData:{pixelBlock:new yt({width:r,height:a,pixels:g,mask:new Uint8Array(v),pixelType:y}),extent:e}}}const p=!!l.requestAsImageElement&&!this.pixelFilter,m=p&&!!l.returnImageBitmap,c={imageServiceParameters:u,imageProps:{extent:e,width:r,height:a,format:this.format},requestAsImageElement:p,returnImageBitmap:m,signal:l.signal};return this._requestArrayBuffer(c)}fetchKeyProperties(e){return I(o(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then(r=>r.data)}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new b("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):I(o(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then(r=>At.fromJSON(r.data))}getCatalogItemRasterInfo(e,r){const a={...r,query:this._getQueryParams()};return Ts(o(this.parsedUrl),e,a)}async getCatalogItemICSInfo(e,r){const{data:a}=await I(o(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...r}),l=a?.ics;if(!l)return;let u=null;try{u=(await I(o(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...r})).data.extent}catch{}if(!u?.spatialReference)return{ics:l,icsToPixelTransform:null,icsExtent:null,northDirection:null};const p=this.version>=10.7?I(o(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...r}).then(x=>x.data).catch(()=>({})):{},m=u.spatialReference,c={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[u]}),inSR:gt(m),outSR:"0:"+e},d=I(o(this.parsedUrl)+"/project",{query:this._getQueryParams(c),...r}).then(x=>x.data).catch(()=>({})),h=5,f=(u.xmin+u.xmax)/2,v=(u.ymax-u.ymin)/(h+1),y=u.ymin+v,g=[];for(let x=0;x<h;x++)g.push({x:f,y:y+v*x});const R={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:g}),inSR:gt(m),outSR:"0:"+e},T=I(o(this.parsedUrl)+"/project",{query:this._getQueryParams(R),...r}).then(x=>x.data).catch(()=>({})),P=await Promise.all([p,d,T]);let C=P[0].ipxf;if(C==null){const x=l.geodataXform?.xf_0;x?.name?.toLowerCase()==="topup"&&x?.coefficients?.length===6&&(C={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:x.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const N=Ue.fromJSON(P[1]?.geometries?.[0]);N&&(N.spatialReference=new re({wkid:0,imageCoordinateSystem:l}));const j=P[2].geometries?P[2].geometries.filter(x=>x?.x!=null&&x.y!=null&&x.x!=="NaN"&&x.y!=="NaN"):[],M=j.length;if(M<3)return{ics:l,icsToPixelTransform:C,icsExtent:N,northDirection:null};let H=0,Me=0,ve=0,Ve=0;for(let x=0;x<M;x++)H+=j[x].x,Me+=j[x].y,ve+=j[x].x*j[x].x,Ve+=j[x].x*j[x].y;const ee=(M*Ve-H*Me)/(M*ve-H*H);let Re=0;const Ae=j[h-1].x>j[0].x,me=j[h-1].y>j[0].y;return ee===1/0?Re=me?90:270:ee===0?Re=Ae?0:180:ee>0?Re=Ae?180*Math.atan(ee)/Math.PI:180*Math.atan(ee)/Math.PI+180:ee<0&&(Re=me?180+180*Math.atan(ee)/Math.PI:360+180*Math.atan(ee)/Math.PI),{ics:l,icsToPixelTransform:C,icsExtent:N,northDirection:Re}}async generateRasterInfo(e,r){e=A(F,e);const a={...r,query:this._getQueryParams()};if(!e||e.functionName?.toLowerCase()==="none"||this._isVectorFieldResampleFunction(e))return this.serviceRasterInfo??_t(o(this.parsedUrl),this.sourceJSON,a);const l=Cs(e);if(!l)throw new b("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[l])return this._functionRasterInfos[l];const u=li(o(this.parsedUrl),e,a);this._functionRasterInfos[l]=u;try{return await u}catch(p){throw this._functionRasterInfos[l]=null,p}}getExportImageServiceParameters(e,r,a,l){e=e.clone().shiftCentralMeridian();const u=$e(e.spatialReference,o(this.parsedUrl)),p=this.exportImageServiceParameters.toJSON(),{bandIds:m,noData:c}=p;let{renderingRule:d}=p;const h=this.rasterFunction?.rasterFunctionDefinition,f=this.renderer?.type,v=!f||f==="raster-stretch"||f==="raster-colormap"||f==="unique-value"||f==="class-breaks"||f==="raster-shaded-relief";if(m?.length&&this._hasRasterFunction(this.rasterFunction)&&!h&&v){const R={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:m}};if(d.rasterFunction==="Stretch")R.rasterFunctionArguments.Raster=d.rasterFunctionArguments.Raster,d.rasterFunctionArguments.Raster=R;else if(d.rasterFunction==="Colormap"){const T=d.rasterFunctionArguments.Raster;T?.rasterFunction==="Stretch"?(R.rasterFunctionArguments.Raster=T.rasterFunctionArguments.Raster,T.rasterFunctionArguments.Raster=R):(R.rasterFunctionArguments.Raster=T,d.rasterFunctionArguments.Raster=R)}else R.rasterFunctionArguments.Raster=d,d=R;p.bandIds=void 0}else p.bandIds=m?.join(",");Array.isArray(c)&&c.length>0&&(p.noData=c.join(","));const y=this._processMultidimensionalIntersection(null,l,this.exportImageServiceParameters.mosaicRule);if(y.isOutSide)return null;p.mosaicRule=y.mosaicRule!=null?JSON.stringify(y.mosaicRule):null,l=y.timeExtent,p.renderingRule=this._getRenderingRuleString(F.fromJSON(d));const g={};if(l!=null){const{start:R,end:T}=l.toJSON();R&&T&&R===T?g.time=""+R:R==null&&T==null||(g.time=`${R??"null"},${T??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:u,imageSR:u,size:r+","+a,...p,...g}}async getSamples(e,r){if(!(await this._fetchCapabilities(r?.signal))?.operations.supportsGetSamples)throw new b("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=V(e);const{raster:l}=this;return l&&e.raster==null&&(e.raster=l),ys(this.url,e,this._getRequestOptions(r))}async identify(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsIdentify)throw new b("imagery-layer:identify","identify operation is not supported on the input image service");e=V(e),this.version<10.91&&e.geometry?.type==="extent"&&(e.geometry=ft.fromExtent(e.geometry));const a=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(a.isOutSide)throw new b("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=a.timeExtent,e.mosaicRule=a.mosaicRule;const{raster:l,rasterFunction:u}=this;return u&&e.rasterFunction==null&&(e.rasterFunction=u),l&&e.raster==null&&(e.raster=l),Mt(this.url,e,this._getRequestOptions(r))}async imageToMap(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsImageToMap)throw new b("imagery-layer:image-to-map","imageToMap operation is not supported on the input image service");return xs(o(this.parsedUrl),e,this._getRequestOptions(r))}async imageToMapMultiray(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsImageToMapMultiray)throw new b("imagery-layer:image-to-map-multiray","imageToMapMultiray operation is not supported on the input image service");return Is(o(this.parsedUrl),e,this._getRequestOptions(r))}async mapToImage(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsMapToImage)throw new b("imagery-layer:map-to-image","mapToImage operation is not supported on the input image service");return Fs(o(this.parsedUrl),e,this._getRequestOptions(r))}async findImages(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsFindImages)throw new b("imagery-layer:find-images","findImages operation is not supported on the input image service");return js(o(this.parsedUrl),e,this._getRequestOptions(r))}async getImageUrl(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsGetImageUrl)throw new b("imagery-layer:get-image-url","getImageUrl operation is not supported on the input image service");return Ds(o(this.parsedUrl),e,this._getRequestOptions(r))}createQuery(){return new mt({outFields:["*"],returnGeometry:!0,where:this.definitionExpression||"1=1"})}async queryBoundary(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsQueryBoundary)throw new b("imagery-layer:query-boundary","queryBoundary operation is not supported on the input image service");return e=e??{outSpatialReference:this.spatialReference},bs(o(this.parsedUrl),e,this._getRequestOptions(r))}async queryRasters(e,r){return{query:e,requestOptions:r}=await this._prepareForQuery(e,r),di(this.url,e,r)}async queryObjectIds(e,r){return{query:e,requestOptions:r}=await this._prepareForQuery(e,r),ci(this.url,e,r)}async queryGPSInfo(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsQueryGPSInfo)throw new b("imagery-layer:query-gps-info","queryGPSInfo operation is not supported on the input image service");return e=e??{where:"1=1"},Ss(o(this.parsedUrl),e,this._getRequestOptions(r))}async queryRasterCount(e,r){return{query:e,requestOptions:r}=await this._prepareForQuery(e,r),mi(this.url,e,r)}async queryVisibleRasters(e,r){if(!e)throw new b("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:a,returnDomainValues:l,returnTopmostRaster:u,showNoDataRecords:p}=r||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let m=!1,c=null,d=null;const h=Fe.servicePixelValue.toLowerCase(),f=this._rasterFunctionNamesIndex;if(e.outFields!=null&&(m=e.outFields.some(N=>!N.toLowerCase().startsWith(h)),this.version>=10.4)){const N=e.outFields.filter(M=>M.toLowerCase().startsWith(h)&&M.length>h.length).map(M=>{const H=M.slice(h.length+1);return[this._updateRenderingRulesFunctionName(H,f),H]});c=N.map(M=>new F({functionName:M[0]})),d=N.map(M=>M[1]);const{rasterFunction:j}=this;c.length===0?j?.functionName?(c.push(j),d.push(j.functionName)):c=null:j?.functionName&&!c.some(M=>M.functionName===j.functionName)&&(c.push(j),d.push(j.functionName))}const v=e.outSpatialReference==null||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:y}=this;let g=e.timeExtent||this.timeExtent;if(y){const{isOutside:N,intersection:j}=dt(y,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:this.exportImageServiceParameters.mosaicRule?.multidimensionalDefinition});if(N)throw new b("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");j?.timeExtent!=null&&(g=j.timeExtent)}const R=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,g);let T=e.geometry;this.version<10.91&&T?.type==="extent"&&(T=ft.fromExtent(T));const P=this._getQueryParams({geometry:T,timeExtent:g,mosaicRule:R,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:c,pixelSize:a,returnCatalogItems:m,returnGeometry:v,raster:this.raster,maxItemCount:u?1:null});delete P.f;const C=new Bt(P);try{await this._generateRasterInfo(this.rasterFunction);const N=await Mt(this.url,C,{signal:r?.signal,query:{...this.customParameters}}),j=e.outFields,M=N.value!=null&&N.value.toLowerCase().includes("nodata"),H=m&&!v&&N?.catalogItems?.features.length&&(p||!M),Me=this.multidimensionalInfo&&this.sourceType==="raster-dataset"?Mr({rasterInfo:this.rasterInfo,multidimensionalDefinition:R?.multidimensionalDefinition,timeExtent:g,multidimensionalSubset:this.multidimensionalSubset}):null;if(!H)return this._processVisibleRastersResponse(N,{returnDomainValues:l,templateRRFunctionNames:d,showNoDataRecords:p,templateFields:j,effectiveMultidimensionalDefinition:Me});const ve=this.objectIdField||"ObjectId",Ve=N.catalogItems?.features??[],ee=Ve.map(me=>me.attributes?.[ve]),Re=new mt({objectIds:ee,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[ve]}),Ae=await this.queryRasters(Re);return Ae?.features?.length&&Ae.features.forEach(me=>{Ve.forEach(x=>{x.attributes[ve]===me.attributes[ve]&&me.geometry&&(x.geometry=me.geometry.clone(),e.outSpatialReference!=null&&(x.geometry.spatialReference=e.outSpatialReference))})}),this._processVisibleRastersResponse(N,{returnDomainValues:l,templateRRFunctionNames:d,showNoDataRecords:p,templateFields:j,effectiveMultidimensionalDefinition:Me})}catch{throw new b("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,r){const a=I(o(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:r}).then(p=>p.data?.statistics),l=I(o(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:r}).then(p=>p.data?.histograms),u=await Promise.all([a,l]);return u[0]&&u[0].forEach(p=>{p.avg=p.mean,p.stddev=p.standardDeviation}),{statistics:u[0]||null,histograms:u[1]||null}}async createFlowMesh(e,r){const a=this._rasterJobHandler.instance;return a?a.createFlowMesh(e,r):ni(e.meshType,e.simulationSettings,e.flowData,r.signal!=null?r.signal:new AbortController().signal)}getMultidimensionalSubsetVariables(e){const r=e??this.serviceRasterInfo.multidimensionalInfo;return Vr(this.multidimensionalSubset,r)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const r=this.sourceJSON,a=this.serviceRasterInfo!=null?Promise.resolve(this.serviceRasterInfo):_t(o(this.parsedUrl),r,{signal:e,query:this._getQueryParams()}).then(p=>(this._set("serviceRasterInfo",p),this._set("multidimensionalInfo",p.multidimensionalInfo),ui(p,r),p)),l=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,u=this._getRasterFunctionInfos();return Promise.all([a,l,u]).then(p=>{p[1]?this._set("rasterInfo",p[1]):this._set("rasterInfo",p[0]),p[2]&&this._set("rasterFunctionInfos",p[2]),this.internalRenderer&&!this._isSupportedRenderer(this.internalRenderer)&&(this._set("internalRenderer",null),Pt.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("internalRenderer",this._configRenderer(this.renderer)),this.addHandles([nr(()=>this.rasterFunction,c=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(c).then(d=>{d&&(this.rasterInfo=d)})})]);const{serviceRasterInfo:m}=this;m.multidimensionalInfo!=null&&this._updateMultidimensionalDefinition(m)})}_combineMosaicRuleWithTimeExtent(e,r){const a=this.timeInfo,{multidimensionalInfo:l}=this.serviceRasterInfo;if(e==null||l==null||r==null||a?.startField==null)return e;const{startField:u}=a,p=l.variables.some(y=>y.dimensions.some(g=>g.name===u))?u:"StdTime";if(e=e.clone(),this.sourceType==="mosaic-dataset")return e.multidimensionalDefinition=e.multidimensionalDefinition?.filter(y=>y.dimensionName!==p),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const m=e.multidimensionalDefinition.filter(y=>y.dimensionName===p),c=r.start!=null?r.start.getTime():null,d=r.end!=null?r.end.getTime():null,h=c==null||d==null||c===d,f=h?[c||d]:[[c,d]],v=this.version>=10.8;if(m.length)m.forEach(y=>{y.dimensionName===p&&(v?(y.dimensionName=null,y.isSlice=!1,y.values=[]):(y.isSlice=h,y.values=f))});else if(!v){const y=e.multidimensionalDefinition.filter(g=>g.variableName!=null&&g.dimensionName==null);y.length?y.forEach(g=>{g.dimensionName=p,g.isSlice=h,g.values=f}):e.multidimensionalDefinition.push(new Ar({variableName:"",dimensionName:p,isSlice:h,values:f}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return e==null?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter(r=>!(!r.variableName&&!r.dimensionName)),e.multidimensionalDefinition.length===0&&(e.multidimensionalDefinition=null)),this.sourceType!=="mosaic-dataset"&&e.multidimensionalDefinition==null?null:e)}async _prepareForQuery(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsQuery)throw new b("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=e!=null?A(mt,e):this.createQuery(),r=this._getRequestOptions(r),this.raster&&(r.query={...r.query,raster:this.raster}),{query:e,requestOptions:r}}async _initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const e=new kr;this._rasterJobHandler.connectionPromise=e.initialize().then(()=>{this._rasterJobHandler.instance=e},()=>{}),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null}_isSupportedRenderer(e){const{rasterInfo:r,rasterFunction:a}=this;return e.type==="unique-value"&&this._hasRasterFunction(a)&&r?.bandCount===1&&["u8","s8"].includes(r.pixelType)||r!=null&&e!=null&&Wr(r).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){let r=this.sourceJSON;if(!r){const{data:a,ssl:l}=await I(o(this.parsedUrl),{query:this._getQueryParams(),signal:e});r=a,this.sourceJSON=r,l&&(this.url=this.url.replace(/^http:/i,"https:"))}if(r.capabilities?.toLowerCase().split(",").map(a=>a.trim()).indexOf("tilesonly")>-1)throw new b("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(r,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){return e.serviceSourceType?e.serviceSourceType==="esriImageServiceSourceTypeMosaicDataset":e.fields?.length>0}_isMosaicRuleSupported(e){if(!e)return!1;const r=this._isMosaicDataset(e),a=e.currentVersion>=10.71&&e.hasMultidimensions&&!(e.fields?.length>1);return r||a}_isVectorFieldResampleFunction(e){if(e==null)return!1;const{functionName:r,functionArguments:a}=e,l=r?.toLowerCase()==="resample",u=a?.ResampleType||a?.resampleType;return l&&(u===7||u===10)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){const r=this._isPicture(),{rasterInfo:a}=this;if(!r&&!this.pixelFilter||this._isVectorDataSet()){const l=this.mosaicRule?.multidimensionalDefinition?.[0].variableName,u=Zr({variableName:l,rasterFunctionName:this.rasterFunction?.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&a.bandCount>=3){const m=u?.bandIds??Kr(a);!m||a.bandCount===3&&m[0]===0&&m[1]===1&&m[2]===2||(this.bandIds=m)}e||(e=u?.renderer??Xr(a,{bandIds:this.bandIds,variableName:this.rasterFunction?null:l}));const p=Yr(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=p,this.symbolizer.rasterInfo=a):this.symbolizer=new si({rendererJSON:p,rasterInfo:a}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return e==null?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock!=null?e.pixelBlock.clone():null}}_getQueryParams(e){e?.renderingRule!=null&&typeof e.renderingRule!="string"&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:r,viewId:a}=this;return{raster:r,viewId:a,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e?.query,...this.customParameters}}}_decodePixelBlock(e,r,a){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:r}):Ct(e,r,a)}async _getRasterFunctionInfos(e){const r=this.sourceJSON.rasterFunctionInfos;return this.loaded?r:r&&this.version>=10.3?r.length===1&&r[0].name.toLowerCase()==="none"?r:(await I(o(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e})).data?.rasterFunctionInfos:null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:r,requestAsImageElement:a,returnImageBitmap:l,signal:u}=e;if(a&&this._canRequestImageElement(r.format)){const y=`${o(this.parsedUrl)}/exportImage`,{data:g}=await I(y,{responseType:l?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:u});return g instanceof Blob?{imageBitmap:await Ot(g,y,u),params:r}:{imageOrCanvasElement:g,params:r}}const p=this._initJobHandler(),m=I(o(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:u}),c=(await Promise.all([m,p]))[0].data,d=r.format||"jpgpng";let h=d;if(h!=="bsq"&&h!=="bip"&&(h=ai(c)),!h)throw new b("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(c)));const f={signal:u};return{pixelData:{pixelBlock:await(d==="gif"||d==="bmp"||d.includes("png")&&(h==="png"||h==="jpg")?Ct(c,{useCanvas:!0,...r},f):this._decodePixelBlock(c,{width:r.width,height:r.height,planes:null,pixelType:null,noDataValue:null,format:d},f)),extent:r.extent},params:r}}_generateRasterInfo(e,r){return this.generateRasterInfo(e,r).catch(()=>null)}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this.defaultMosaicRule?.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let r=Jr(e,{multidimensionalSubset:this.multidimensionalSubset});if(r!=null&&r.length>0){this.mosaicRule=this.mosaicRule||new B;const a=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&this.rasterFunction.functionName?.toLowerCase()!=="none"&&r.forEach(l=>l.variableName=""),r=r.filter(({variableName:l,dimensionName:u})=>l&&l!=="*"||u),!a?.length&&r.length&&(this.mosaicRule.multidimensionalDefinition=r)}}_processVisibleRastersResponse(e,r){r=r||{};const a=e.value,{templateRRFunctionNames:l,showNoDataRecords:u,returnDomainValues:p,templateFields:m}=r,c=e.processedValues;let d=e.catalogItems?.features,h=e.properties?.Values?.map(P=>P.replaceAll(/ /gi,", "))||[];const f=this.objectIdField||"ObjectId",v=typeof a=="string"&&a.toLowerCase().includes("nodata"),y=[];if(a&&!d&&!v){const P={};P[f]=0,h=[a],d=[new or({geometry:this.fullExtent,attributes:P})],this.multidimensionalInfo&&this.sourceType==="raster-dataset"&&qr(this.rasterFields,P,r.effectiveMultidimensionalDefinition)}if(!d)return[];this._updateResponseFieldNames(d,m),v&&!u&&(d=[]);const{itemPixelValue:g,servicePixelValue:R}=Fe,T=this.rasterFields.some(P=>P.name===g);for(let P=0;P<d.length;P++){const C=d[P];if(a!=null){const N=h[P],j=this.rasterFunction&&c&&c.length>0&&l&&l.length>0&&l.includes(this.rasterFunction.functionName)?c[l.indexOf(this.rasterFunction.functionName)]:a;if(N.toLowerCase()==="nodata"&&!u)continue;T&&(C.attributes[g]=N),C.attributes[R]=j,this._updateFeatureWithMagDirValues(C,N);const M=this.fields&&this.fields.length>0;let H=this.rasterFunction&&this.serviceRasterInfo.attributeTable!=null?M?N:a:j;this.rasterFunction||(H=M?N:a),this._updateFeatureWithRasterAttributeTableValues(C,H)}if(C.sourceLayer=C.layer=this,p&&this._updateFeatureWithDomainValues(C),l&&c&&l.length===c.length)for(let N=0;N<l.length;N++){const j=`${Fe.servicePixelValue}.${l[N]}`;C.attributes[j]=c[N]}y.push(d[P])}return y}_processMultidimensionalIntersection(e,r,a){const{multidimensionalSubset:l}=this;if(!l)return{isOutSide:!1,timeExtent:r,mosaicRule:a=this._combineMosaicRuleWithTimeExtent(a,r)};if(l){const{isOutside:u,intersection:p}=dt(l,{geometry:e,timeExtent:r});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null};p?.timeExtent!=null&&(r=p.timeExtent)}if(a=this._combineMosaicRuleWithTimeExtent(a,r),a?.multidimensionalDefinition){const{isOutside:u}=dt(l,{multidimensionalDefinition:a.multidimensionalDefinition});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:r,mosaicRule:a}}_updateFeatureWithRasterAttributeTableValues(e,r){const a=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(a==null)return;const{features:l,fields:u}=a,p=u.map(c=>c.name).find(c=>c.toLowerCase()==="value");if(!p)return;const m=l.filter(c=>c.attributes[p]===(r!=null?parseInt(r,10):null));m&&m[0]&&u.forEach(c=>{const d=Er+c.name;e.attributes[d]=m[0].attributes[c.name]})}_updateFeatureWithMagDirValues(e,r){if(!this._isVectorDataSet())return;const a=r.split(/,\s*/).map(c=>parseFloat(c)),l=a.map(c=>[c]),u=a.map(c=>({minValue:c,maxValue:c,noDataValue:null})),p=new yt({height:1,width:1,pixelType:"f32",pixels:l,statistics:u});this.pixelFilter!=null&&this.pixelFilter({pixelBlock:p,extent:new Ue(0,0,0,0,this.spatialReference)});const m=this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"?[p.pixels[0][0],p.pixels[1][0]]:oi([p.pixels[0][0],p.pixels[1][0]]);e.attributes[Fe.magnitude]=m[0],e.attributes[Fe.direction]=m[1]}_updateFeatureWithDomainValues(e){const r=this.fields&&this.fields.filter(a=>a.domain&&a.domain.type==="coded-value");r?.forEach(a=>{const l=e.attributes[a.name];if(l!=null){const u=a.domain.codedValues.find(p=>p.code===l);u&&(e.attributes[a.name]=u.name)}})}_updateResponseFieldNames(e,r){if(!r||r.length<1)return;const a=this.fieldsIndex;a!=null&&e.forEach(l=>{if(l?.attributes)for(const u of r){const p=a.get(u)?.name;p&&p!==u&&(l.attributes[u]=l.attributes[p],delete l.attributes[p])}})}_getRenderingRuleString(e){if(e){let r=e.toJSON();return r=r.rasterFunctionDefinition??r,(r.thumbnail||r.thumbnailEx)&&(r.thumbnail=r.thumbnailEx=null),JSON.stringify(r)}return null}_hasRasterFunction(e){return e?.functionName!=null&&e.functionName.toLowerCase()!=="none"}_updateRenderingRulesFunctionName(e,r){if(!e||e.length<1)return;if(e==="Raw")return e.replace("Raw","None");const a=e.toLowerCase().replaceAll(/ /gi,"_");return r.has(a)?r.get(a):e}_isRFTJson(e){return e?.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return this.serviceDataType==="esriImageServiceDataTypeVector-UV"||this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"}_applyMosaicAndRenderingRules(e){const{raster:r,mosaicRule:a,rasterFunction:l}=this;l&&e.rasterFunction==null&&(e.rasterFunction=l),a&&e.mosaicRule==null&&(e.mosaicRule=a),r&&e.raster==null&&(e.raster=r)}_applyMosaicRule(e){const{raster:r,mosaicRule:a}=this;a&&e.mosaicRule==null&&(e.mosaicRule=a),r&&e.raster==null&&(e.raster=r)}_readCapabilities(e){const r=e.capabilities?e.capabilities.toLowerCase().split(",").map(T=>T.trim()):["image","catalog"],{currentVersion:a,advancedQueryCapabilities:l,maxRecordCount:u}=e,p=r.includes("image"),m=e.serviceDataType==="esriImageServiceDataTypeElevation",c=!(!e.spatialReference&&!e.extent?.spatialReference),d=r.includes("edit"),h=r.includes("mensuration")&&c,f=e.mensurationCapabilities==null?[]:e.mensurationCapabilities.toLowerCase().split(",").map(T=>T.trim()),v=h&&f.includes("basic"),y=this._isMosaicDataset(e)&&r.includes("catalog"),g=r.includes("download"),R=a>=10.7&&m||a>=11.4&&(m||h&&f.includes("3d"));return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:p,supportsExportImage:p,supportsIdentify:p,supportsImageToMap:a>=11.2&&y,supportsImageToMapMultiray:a>=11.2&&y,supportsMapToImage:a>=11.2&&y,supportsFindImages:a>=11.2&&y,supportsGetImageUrl:a>=11.3&&g,supportsMeasure:h,supportsMeasureFromImage:a>=11.2,supportsDownload:g,supportsQuery:y&&e.fields&&e.fields.length>0,supportsGetSamples:a>=10.2&&p,supportsProject:a>=10.3&&p,supportsComputeStatisticsHistograms:a>=10.4&&p,supportsQueryBoundary:a>=10.6&&p,supportsCalculateVolume:R,supportsComputePixelLocation:a>=10.7&&y,supportsComputeAngles:a>=10.91,supportsQueryGPSInfo:a>=11.2&&y,supportsAdd:d,supportsDelete:d,supportsEditing:d,supportsUpdate:d,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryBins:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:u,maxRecordCountFactor:void 0,supportsStatistics:!!l?.supportsStatistics,supportsOrderBy:!!l?.supportsOrderBy,supportsDistinct:!!l?.supportsDistinct,supportsPagination:!!l?.supportsPagination,supportsStandardizedQueriesOnly:!!l?.useStandardizedQueries,supportsPercentileStatistics:!!l?.supportsPercentileStatistics,supportsCentroid:!!l?.supportsReturningGeometryCentroid,supportsCurrentUser:!1,supportsDistance:!!l?.supportsQueryWithDistance,supportsExtent:!!l?.supportsReturningQueryExtent,supportsGeometryProperties:!!l?.supportsReturningGeometryProperties,supportsHavingClause:!!l?.supportsHavingClause,supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsReturnMesh:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:!1,supportsTopFeaturesQuery:!1,supportsQueryByAnonymous:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!l?.supportsDefaultSR,supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0,supportsTrueCurve:!1},mensuration:{supportsDistanceAndAngle:v,supportsAreaAndPerimeter:v,supportsPointOrCentroid:v,supportsHeightFromBaseAndTop:h&&f.includes("base-top height"),supportsHeightFromBaseAndTopShadow:h&&f.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:h&&f.includes("top-top shadow height"),supports3D:h&&f.includes("3d")}}}};function o(e){return e?.path??""}return i([n({clonable:!1})],t.prototype,"_functionRasterInfos",void 0),i([n({clonable:!1})],t.prototype,"_rasterJobHandler",void 0),i([n({clonable:!1})],t.prototype,"_cachedRendererJson",void 0),i([n({readOnly:!0})],t.prototype,"_serviceSupportsMosaicRule",void 0),i([E("_serviceSupportsMosaicRule",["currentVersion","fields"])],t.prototype,"readServiceSupportsMosaicRule",null),i([n({readOnly:!0})],t.prototype,"_rasterFunctionNamesIndex",null),i([n()],t.prototype,"adjustAspectRatio",void 0),i([n({type:[Qe],json:{write:!0}})],t.prototype,"bandIds",void 0),i([E("bandIds")],t.prototype,"readBandIds",null),i([n({readOnly:!0,json:{read:!1}})],t.prototype,"capabilities",void 0),i([E("service","capabilities",["capabilities","currentVersion","serviceDataType"])],t.prototype,"readCapabilities",null),i([n({type:Number})],t.prototype,"compressionQuality",void 0),i([D("compressionQuality")],t.prototype,"writeCompressionQuality",null),i([n({type:Number})],t.prototype,"compressionTolerance",void 0),i([D("compressionTolerance")],t.prototype,"writeCompressionTolerance",null),i([n({json:{read:{source:"copyrightText"}}})],t.prototype,"copyright",void 0),i([n({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],t.prototype,"defaultMosaicRule",void 0),i([E("defaultMosaicRule",["defaultMosaicMethod"])],t.prototype,"readDefaultMosaicRule",null),i([n({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],t.prototype,"definitionExpression",void 0),i([n({readOnly:!0,constructOnly:!0})],t.prototype,"exportImageServiceParameters",void 0),i([n()],t.prototype,"rasterInfo",void 0),i([n({readOnly:!0,type:[er]})],t.prototype,"fields",void 0),i([n({readOnly:!0})],t.prototype,"fieldsIndex",null),i([n({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff","bip","bsq"],json:{write:!0}})],t.prototype,"format",null),i([E("service","format",["serviceDataType"])],t.prototype,"readFormat",null),i([n({type:Ue})],t.prototype,"fullExtent",void 0),i([n({readOnly:!0})],t.prototype,"hasMultidimensions",void 0),i([n({json:{read:{source:"maxImageHeight"}}})],t.prototype,"imageMaxHeight",void 0),i([n({json:{read:{source:"maxImageWidth"}}})],t.prototype,"imageMaxWidth",void 0),i([n({type:String,json:{type:ge.jsonValues,read:ge.read,write:ge.write}})],t.prototype,"interpolation",void 0),i([n()],t.prototype,"minScale",void 0),i([E("service","minScale")],t.prototype,"readMinScale",null),i([n()],t.prototype,"maxScale",void 0),i([E("service","maxScale")],t.prototype,"readMaxScale",null),i([n({type:B})],t.prototype,"mosaicRule",null),i([E("mosaicRule",["mosaicRule","defaultMosaicMethod"])],t.prototype,"readMosaicRule",null),i([D("mosaicRule")],t.prototype,"writeMosaicRule",null),i([n()],t.prototype,"multidimensionalInfo",void 0),i([n({type:Ur,json:{write:!0}})],t.prototype,"multidimensionalSubset",void 0),i([n({json:{type:Qe}})],t.prototype,"noData",void 0),i([D("noData")],t.prototype,"writeNoData",null),i([n({type:String,json:{type:He.jsonValues,read:He.read,write:He.write}})],t.prototype,"noDataInterpretation",void 0),i([n({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],t.prototype,"objectIdField",void 0),i([E("objectIdField")],t.prototype,"readObjectIdField",null),i([n({readOnly:!0})],t.prototype,"geometryType",void 0),i([n({})],t.prototype,"typeIdField",void 0),i([n({})],t.prototype,"types",void 0),i([n({readOnly:!0})],t.prototype,"parsedUrl",null),i([n({type:Function})],t.prototype,"pixelFilter",void 0),i([n()],t.prototype,"raster",void 0),i([n({readOnly:!0})],t.prototype,"sourceType",void 0),i([E("sourceType",["serviceSourceType","fields"])],t.prototype,"readSourceType",null),i([n()],t.prototype,"viewId",void 0),i([n()],t.prototype,"renderer",null),i([n({types:Br,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:Hr,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&e.type!=="vector-field"&&e.type!=="flow"})}}}}})],t.prototype,"internalRenderer",null),i([E("internalRenderer")],t.prototype,"readRenderer",null),i([D("internalRenderer")],t.prototype,"writeRenderer",null),i([n({clonable:!1})],t.prototype,"symbolizer",void 0),i([n(tr)],t.prototype,"opacity",void 0),i([n({readOnly:!0})],t.prototype,"rasterFields",null),i([n({constructOnly:!0})],t.prototype,"rasterFunctionInfos",void 0),i([n({type:F,json:{name:"renderingRule"}})],t.prototype,"rasterFunction",null),i([E("rasterFunction",["renderingRule","rasterFunctionInfos"])],t.prototype,"readRasterFunction",null),i([n({readOnly:!0})],t.prototype,"serviceDataType",void 0),i([n({readOnly:!0,type:re})],t.prototype,"spatialReference",void 0),i([E("spatialReference",["spatialReference","extent"])],t.prototype,"readSpatialReference",null),i([n({type:De.apiValues,json:{read:De.read,type:De.jsonValues}})],t.prototype,"pixelType",void 0),i([D("pixelType")],t.prototype,"writePixelType",null),i([n({constructOnly:!0,type:Et})],t.prototype,"serviceRasterInfo",void 0),i([n()],t.prototype,"sourceJSON",void 0),i([n(rr)],t.prototype,"url",void 0),i([n({readOnly:!0})],t.prototype,"version",void 0),i([E("version",["currentVersion","fields","timeInfo"])],t.prototype,"readVersion",null),t=i([w("esri.layers.mixins.ArcGISImageService")],t),t};let L=class extends ur(pr(cr(mr(dr(pi(Os(yr(hr(fr(gr(ce.ClonableMixin(wr)))))))))))){constructor(...s){super(...s),this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery",this._debouncedSaveOperations=vr(async(t,o,e)=>{const{save:r,saveAs:a}=await Rr(()=>import("./imageryUtils-DLMoevnS.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8]));switch(t){case ke.SAVE:return r(this,o);case ke.SAVE_AS:return a(this,e,o)}})}normalizeCtorArgs(s,t){return typeof s=="string"?{url:s,...t}:s}load(s){const t=s!=null?s.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},s).catch(br).then(()=>this._fetchService(t))),Promise.resolve(this)}get legendEnabled(){return!this._isPreviewLayer&&(this._get("legendEnabled")??!0)}set legendEnabled(s){this._set("legendEnabled",s)}get listMode(){return this._isPreviewLayer?"hide":this._get("listMode")}set listMode(s){this._set("listMode",s)}writeOperationalLayerType(s,t,o){const e=this.renderer?.type==="vector-field";t[o]=e?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}get _isPreviewLayer(){return!(!this.raster||!this.url?.toLowerCase().includes("/rasterrendering/imageserver"))}createPopupTemplate(s){const{rasterFields:t}=this,o=new Set,e=Fe.itemPixelValue.toLowerCase(),r=this.sourceType==="raster-dataset",a=Gr.toLowerCase(),l=`${Fe.servicePixelValue.toLowerCase()}.`;for(const m of t){const c=m.name.toLowerCase();c===e||c.startsWith(l)||r&&c.startsWith(a)||o.add(m.name)}const u=Sr({fields:t,title:this.title},{...s,visibleFieldNames:o}),{rasterInfo:p}=this;return u?.fieldInfos&&p&&zr(u.fieldInfos,p),u}queryFeatures(s,t){return this.queryRasters(s,t).then(o=>{if(o?.features)for(const e of o.features)e.layer=e.sourceLayer=this;return o})}queryFeatureCount(s,t){return this.queryRasterCount(s,t)}redraw(){this.emit("redraw")}async save(s){return this._debouncedSaveOperations(ke.SAVE,s)}async saveAs(s,t){return this._debouncedSaveOperations(ke.SAVE_AS,t,s)}serviceSupportsSpatialReference(s){return xr(this,s)}write(s,t){if(!this._isPreviewLayer)return super.write(s,t);if(t?.messages){const o=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new b("layer:unsupported",`Imagery preview layer (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${o}'`,{layer:this}))}return null}};i([n(Ir)],L.prototype,"legendEnabled",null),i([n({type:["show","hide"]})],L.prototype,"listMode",null),i([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],L.prototype,"isReference",void 0),i([n({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],L.prototype,"operationalLayerType",void 0),i([D("web-map","operationalLayerType")],L.prototype,"writeOperationalLayerType",null),i([n(Fr)],L.prototype,"popupEnabled",void 0),i([n({type:Dr,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],L.prototype,"popupTemplate",void 0),i([n({readOnly:!0})],L.prototype,"defaultPopupTemplate",null),i([n({readOnly:!0,json:{read:!1}})],L.prototype,"type",void 0),i([n({readOnly:!0})],L.prototype,"_isPreviewLayer",null),L=i([w("esri.layers.ImageryLayer")],L);const Da=L;export{Da as default};
