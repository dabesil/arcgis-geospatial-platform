import{cX as X,mj as D,U as F,mk as B,ml as G,iH as b,gg as I,gf as z,mm as W,mn as Y,mo as Z,hK as ee,er as te,eL as se,mp as ie,dv as re,a6 as ne,a0 as L,a1 as q,a2 as oe}from"./index-DZKbNDrL.js";import{f as A,o as U}from"./quantityUtils-CDTUFnD-.js";import{j as u}from"./elevationInfoUtils-D_wIrEBO.js";import{p as P,N as f,u as y,s as c,o as $,b as C,n as J,q as R,M as K,J as ae,r as he,I as M,e as N,j as de,t as le,i as ce,E as pe}from"./hitTestSelectUtils-xAvec0YX.js";import{s as x,r as ge,g as fe,p as S,d as ue,o as xe,h as me}from"./RouteLayerInteraction-u0KM2WW7.js";import{u as Q}from"./geodesicLengthMeasurementUtils-C81nZujY.js";import"./vendor-0HVaVRtn.js";import"./projectVectorToVector-DC2iLtOz.js";import"./projectPointToVector-BgmvMo_6.js";import"./geodesicUtils-DhJKbwR0.js";import"./plane-ErUWAFaf.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-CuaTMZXe.js";import"./GraphicsLayer-By3DMs5z.js";import"./Stop-CpvMpZEG.js";import"./networkEnums-BTDz3D8w.js";import"./geometryEngine-wJCmFpP-.js";import"./geometryEngineBase-C-gsyNi-.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./hydrated-D3kW-210.js";class k{constructor(s,e){this.view=s,this.options=e,this.squaredShortLineThreshold=P.shortLineThreshold*P.shortLineThreshold}snap(s,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(s,e):this.snapNewVertex(s,e)}edgeExceedsShortLineThreshold(s,e){return this.exceedsShortLineThreshold(f(s.leftVertex.pos,this.view,e),f(s.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(s,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||y(x(e,t,u,this.view),x(s,t,u,this.view))>this.squaredShortLineThreshold}isVertical(s,e,{spatialReference:t}){const i=X(t);return D(c(s),c(e))*i<P.verticalLineThresholdMeters}squaredProximityThreshold(s){return s==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:s,touchSensitivityMultiplier:e}=this.options,t=s*e;return t*t}}class ve extends k{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=[];if(i<1)return r;const{spatialReference:n}=e,a=x(s,n,u,this.view),{view:o}=this,h=t.edges[i-1];let d=h;do{if(this.edgeExceedsShortLineThreshold(d,e)){const g=$(d,o,e);this._processCandidateProposal(g.left,g.right,s,a,e,r)}d=d.leftVertex.leftEdge}while(d&&d!==h);return r}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2)return t;const{view:n}=this,{spatialReference:a}=e,o=x(s,a,u,n),h=i.leftEdge,d=i.rightEdge;h&&d&&this.edgeExceedsShortLineThreshold(h,e)&&this.edgeExceedsShortLineThreshold(d,e)&&this._processCandidateProposal(f(h.leftVertex.pos,n,e),f(d.rightVertex.pos,n,e),s,o,e,t);const g=r.edges[0];let p=g;do{if(p!==i.leftEdge&&p!==i.rightEdge&&this.edgeExceedsShortLineThreshold(p,e)){const m=$(p,n,e);this._processCandidateProposal(m.left,m.right,s,o,e,t)}p=p.rightVertex.rightEdge}while(p&&p!==g);return t}_processCandidateProposal(s,e,t,i,r,n){const{spatialReference:a,pointer:o}=r,h=F();Ee(h,s,e,t,r);const d=C(J(h));y(i,x(d,a,u,this.view))<this.squaredProximityThreshold(o)&&n.push(new ge({lineStart:s,lineEnd:e,targetPoint:d,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}function Ee(l,s,e,t,i){we(l,s,e,t,i)||Ve(l,t,s,e)}function we(l,s,e,t,{spatialReference:i}){const r=R(s,e,i,i);if(r==null)return!1;const n=R(e,t,i,i);if(n==null)return!1;const a=Q(e,t,i);if(a==null)return!1;const o=Math.abs(B.shortestSignedDiff(r,n))>Math.PI/2?G.normalize(r+Math.PI):r;return K(l,e,i,A(a,"meters"),U(o,"radians","geographic"),"geodesic"),l[2]=t[2],!0}function Ve(l,s,e,t){ae(s,{start:e,end:t,type:he.LINE},l),l[2]=s[2]}let Pe=class extends k{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=t.vertices.length,n=[];if(i<2)return n;const{view:a}=this,o=x(s,e.spatialReference,u,a),h=f(t.vertices[r-1].pos,a,e),d=f(t.vertices[0].pos,a,e),g=t.edges[i-1];let p=g;do{if(this.edgeExceedsShortLineThreshold(p,e)){const m=$(p,a,e);this._checkEdgeForParallelLines(m,h,s,o,e,n),this._checkEdgeForParallelLines(m,d,s,o,e,n)}p=p.leftVertex.leftEdge}while(p&&p!==g);return n}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<3)return t;const{view:n}=this,a=x(s,e.spatialReference,u,n),o=i.leftEdge,h=i.rightEdge,d=r.vertices[0],g=f(d.pos,n,e),p=r.vertices.length,m=r.vertices[p-1],w=f(m.pos,n,e),_=r.edges[0];let v=_;do{if(v!==o&&v!==h&&this.edgeExceedsShortLineThreshold(v,e)){const T=$(v,n,e);o&&this._checkEdgeForParallelLines(T,f(o.leftVertex.pos,n,e),s,a,e,t),h&&this._checkEdgeForParallelLines(T,f(h.rightVertex.pos,n,e),s,a,e,t),i===d?this._checkEdgeForParallelLines(T,w,s,a,e,t):i===m&&this._checkEdgeForParallelLines(T,g,s,a,e,t)}v=v.rightVertex.rightEdge}while(v&&v!==_);return t}_checkEdgeForParallelLines(s,e,t,i,r,n){const a=s.left,o=s.right;if(M(E,c(e),c(a),c(o)),b(E,c(e))<P.parallelLineThreshold)return;M(E,c(t),c(a),c(o),c(e));const{spatialReference:h,pointer:d}=r,g=C(N(E[0],E[1],t[2]));if(y(i,x(g,h,u,this.view))<this.squaredProximityThreshold(d)){if(this.isVertical(g,e,r)||this.isVertical(a,o,r)||ye(s,n))return;n.push(new fe({referenceLine:s,lineStart:e,targetPoint:g,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}};function ye(l,s){const e=l.left,t=l.right;for(const i of s)if(M(E,c(t),c(i.constraint.start),c(i.constraint.end),c(e)),b(E,c(t))<P.parallelLineThreshold)return i.addReferenceLine(l),!0;return!1}const E=I();class _e extends k{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[];if(t.vertices.length<2)return i;const{view:r}=this,n=x(s,e.spatialReference,u,r),a=t.vertices.at(-1);this._checkForSnappingCandidate(S.LastVertex,i,a.leftEdge,a,a.leftEdge.leftVertex,s,n,e);const o=t.vertices[0];return this._checkForSnappingCandidate(S.FirstVertex,i,o.rightEdge,o,o.rightEdge.rightVertex,s,n,e),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle;if(i.component.vertices.length<3)return t;const{view:r}=this,n=x(s,e.spatialReference,u,r),a=i.leftEdge,o=i.rightEdge;if(a?.leftVertex.leftEdge){const h=a.leftVertex.leftEdge;this._checkForSnappingCandidate(S.ExistingEdge,t,h,h.rightVertex,h.leftVertex,s,n,e)}if(o?.rightVertex.rightEdge){const h=o.rightVertex.rightEdge;this._checkForSnappingCandidate(S.ExistingEdge,t,h,h.leftVertex,h.rightVertex,s,n,e)}return t}_checkForSnappingCandidate(s,e,t,i,r,n,a,o){if(!this.edgeExceedsShortLineThreshold(t,o))return;const h=this.view,d=f(i.pos,h,o),g=f(r.pos,h,o);Te(O,g,d,n,o),this._checkForSnappingCandidateAlongProjectedRay(s,e,g,d,O,n,a,o)}_checkForSnappingCandidateAlongProjectedRay(s,e,t,i,r,n,a,o){const{spatialReference:h,pointer:d}=o,g=z(j,c(n),c(i)),p=W(r,g)/Y(r),m=Z(j,c(i),r,p),w=C(N(m[0],m[1],n[2]));if(y(a,x(w,h,u,this.view))>this.squaredProximityThreshold(d)||this.isVertical(w,i,o)||this.isVertical(i,t,o))return;const _=ee(F(),i,r,Math.sign(p));e.push(new ue({targetPoint:w,constraint:new de(i,J(_)),previousVertex:t,otherVertex:i,otherVertexType:xe.CENTER,selfSnappingType:s,isDraped:o.elevationInfo?.mode==="on-the-ground"}))}}function Te(l,s,e,t,i){Le(l,s,e,t,i)||Se(l,s,e)}function Le(l,s,e,t,{spatialReference:i}){const r=R(s,e,i,i);if(r==null)return!1;const n=R(e,t,i,i);if(n==null)return!1;const a=Math.sign(G.shortestSignedDiff(r,n))*Math.PI*.5,o=U(r+a,"radians","geographic"),h=F(),d=Q(e,t,i);return d!=null&&(K(h,e,i,A(d,"meters"),o,"geodesic"),te(l,h,e),!0)}function Se(l,s,e){const t=z(j,c(e),c(s));se(l,t[1],-t[0],0)}const j=I(),O=F();let $e=class extends k{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[],r=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||r<2)return i;const{view:n}=this,a=t.vertices[0],o=t.vertices[r-1],h=f(a.pos,n,e),d=f(o.pos,n,e);return this._processCandidateProposal(h,d,s,e,i),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(i.index===0||i.index===r.vertices.length-1))return t;const{view:n}=this,a=f(i.leftEdge.leftVertex.pos,n,e),o=f(i.rightEdge.rightVertex.pos,n,e);return this._processCandidateProposal(a,o,s,e,t),t}_processCandidateProposal(s,e,t,i,r){if(!this.exceedsShortLineThreshold(s,e,i))return;const n=ie(H,c(s),c(e),.5),a=.5*D(c(s),c(e)),o=le(H,c(t),n,a),h=C(N(o[0],o[1],t[2])),{spatialReference:d,pointer:g}=i,p=x(t,d,u,this.view);if(y(p,x(h,d,u,this.view))<this.squaredProximityThreshold(g)){if(this.isVertical(s,h,i)||this.isVertical(h,e,i))return;r.push(new me({targetPoint:h,point1:s,point2:e,isDraped:i.elevationInfo?.mode==="on-the-ground"}))}}};const H=I();let V=class extends re{constructor(l){super(l),this.updating=!1,this._snappers=new ne,this._domain=ce.SELF}initialize(){this._snappers.push(new Pe(this.view,this.options),new ve(this.view,this.options),new _e(this.view,this.options),new $e(this.view,this.options))}set options(l){this._set("options",l);for(const s of this._snappers)s.options=l}async fetchCandidates(l,s,e){if(!(s&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const i of this._snappers.items)for(const r of i.snap(l,e))t.push(r);return pe(l,t),t}};L([q({readOnly:!0})],V.prototype,"updating",void 0),L([q({constructOnly:!0})],V.prototype,"view",void 0),L([q()],V.prototype,"options",null),V=L([oe("esri.views.interactive.snapping.SelfSnappingEngine")],V);export{V as SelfSnappingEngine};
