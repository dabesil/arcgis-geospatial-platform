import{T as B,cm as j,a0 as c,a1 as u,a2 as N,cU as k,z as A,d0 as U,d4 as E,d7 as O,d2 as F,iT as $,d5 as K,P as W,cy as P,a6 as H,cK as Q,jb as J,cQ as I,cT as X,aX as L,jc as q,Q as Y,fV as Z,jd as tt}from"./index-DZKbNDrL.js";import{b as M,g as et,d as it}from"./kmlUtils-BgWeQlrM.js";import{g as at,f as st,S as rt}from"./BitmapTechnique-Cdl6vt7D.js";import{r as ot}from"./BitmapContainer-B-02qmEh.js";import{S as nt,y as lt}from"./LayerView-D9yvypP5.js";import{t as R}from"./GraphicContainer-qTzHvHgb.js";import{A as T}from"./GraphicsView2D-CLkr7LDF.js";import{z as pt,a as ht}from"./rasterProjectionHelper-SCiZMxmf.js";import{n as mt}from"./VertexStream-COsPlS-G.js";import{y as ct,o as dt}from"./RenderingContext-D64nTY3m.js";import{x as ut}from"./FramebufferObject-DiZqzhFd.js";import{m as gt}from"./rasterUtils-0btF6Jes.js";import"./vendor-0HVaVRtn.js";import"./Container-B9xjPENy.js";import"./GraphShaderModule-DA3c8CT_.js";import"./ProgramTemplate-DGIO6IiA.js";import"./ShaderBuilder-ozdbYX8n.js";import"./BindType-BBwFZqyN.js";import"./TechniqueType-uMFRS8dR.js";import"./WGLContainer-DLLIFM4R.js";import"./Utils-CyIAxrbv.js";import"./BoundingBox-BhY6ngIg.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./VertexArrayObject-DoVCN60J.js";import"./memoryEstimations-ULKi3s2m.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-Dof2el9b.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-BA1a396o.js";import"./OptimizedFeature-CCfycK9e.js";import"./OptimizedGeometry-B-8ZGm5_.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./layerViewUtils-QcWzjUdO.js";import"./AGraphicContainer-j4iGCDGE.js";import"./TechniqueInstance-cQWkdpwy.js";import"./UpdateTracking2D-8hKovWHP.js";import"./TileContainer-DYmStfIm.js";import"./FeatureCommandQueue-hlB2SsWB.js";import"./CIMSymbolHelper-C_TXOkqN.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-CqD5F-8k.js";import"./GeometryUtils-BMKdnrSq.js";import"./rasterizingUtils-Djzg1OGQ.js";import"./floatRGBA-B19MpK0C.js";import"./Rect-CUzevAry.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-B3avX-hx.js";import"./OverrideHelper-BgpyywX6.js";import"./quantizationUtils-BpNpb_IQ.js";import"./AttributeStore-Dt2B0O_2.js";import"./queryUtils-BNlzCAaQ.js";import"./json-Wa8cmqdu.js";import"./timeSupport-BhEI9ZjB.js";import"./TimeOnly-TSt7AKcm.js";import"./mat3f64-q3fE-ZOt.js";import"./normalizeUtilsSync-BXFCCzA_.js";import"./dehydratedFeatures-BKKM8fCo.js";import"./utils-G36QMW2V.js";import"./webglDeps-DvWTmSEL.js";import"./NestedMap-CImDozOA.js";import"./renderState-DgbFRBEt.js";import"./basicInterfaces-CZwQPxTp.js";import"./glsl-BH37Aalp.js";import"./testSVGPremultipliedAlpha-Dedo25W6.js";import"./doublePrecisionUtils-B0owpBza.js";let g=class extends B{constructor(){super(...arguments),this.id=0,this.rotation=0,this.href="",this.extent=new j}};c([u({nonNullable:!0,json:{write:!0}})],g.prototype,"id",void 0),c([u({nonNullable:!0,json:{write:!0}})],g.prototype,"rotation",void 0),c([u({nonNullable:!0,json:{write:!0}})],g.prototype,"href",void 0),c([u({type:j,nonNullable:!0,json:{write:!0}})],g.prototype,"extent",void 0),g=c([N("esri.layers.support.KMLMapImage")],g);class h{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(h._instance)return h._instanceRefCount++,h._instance;h._instanceRefCount=1,h._instance=this,this._ownsRctx=!0;const i=document.createElement("canvas").getContext("webgl2");i.getExtension("OES_texture_float"),this._rctx=new ct(i,{})}const a={applyProjection:!0,bilinear:!1,bicubic:!1},r=dt("raster/reproject","raster/reproject",new Map([["a_position",0]]),a);this._program=this._rctx.programCache.acquire(r.shaders.vertexShader,r.shaders.fragmentShader,r.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new mt(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,a,r=!1){const i=k(t.extent,a),s=new A({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:l,y:p}=pt(s,a,t.extent);let n=(l+p)/2;const o=Math.round((i.xmax-i.xmin)/n),w=Math.round((i.ymax-i.ymin)/n);n=(i.width/o+i.height/w)/2;const D=new A({x:n,y:n,spatialReference:i.spatialReference}),x=ht({projectedExtent:i,srcBufferExtent:t.extent,pixelSize:D,hasWrapAround:!0,spacing:[16,16]}),f=gt(this._rctx,x),b=new U(o,w);b.wrapMode=E.CLAMP_TO_EDGE;const m=new ut(this._rctx,b);this._rctx.bindFramebuffer(m),this._rctx.setViewport(0,0,o,w),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(f,1),this._quad.bind();const{width:V=0,height:v=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",V,v),this._program.setUniform2fv("u_transformSpacing",x.spacing),this._program.setUniform2fv("u_transformGridSize",x.size),this._program.setUniform2f("u_targetImageSize",o,w),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),f.dispose(),r){const{width:d,height:C}=m,y=new ImageData(d??0,C??0);m.readPixels(0,0,d??0,C??0,O.RGBA,F.UNSIGNED_BYTE,y.data);const G=m.detachColorTexture($.COLOR_ATTACHMENT0);return m.dispose(),{texture:G,extent:i,imageData:y}}const S=m.detachColorTexture($.COLOR_ATTACHMENT0);return m.dispose(),{texture:S,extent:i}}reprojectBitmapData(t,a){const r=at(t.bitmapData)?st(t.bitmapData):t.bitmapData,i=new U;i.wrapMode=E.CLAMP_TO_EDGE,i.width=t.bitmapData.width,i.height=t.bitmapData.height;const s=new K(this._rctx,i,r),l=this.reprojectTexture({texture:s,extent:t.extent},a,!0);l.texture.dispose();const p=document.createElement("canvas"),n=l.imageData;return p.width=n.width,p.height=n.height,p.getContext("2d").putImageData(n,0,0),{bitmapData:p,extent:l.extent}}async loadAndReprojectBitmapData(t,a,r){const i=(await W(t,{responseType:"image"})).data,s=document.createElement("canvas");s.width=i.width,s.height=i.height;const l=s.getContext("2d");l.drawImage(i,0,0);const p=l.getImageData(0,0,s.width,s.height);if(a.spatialReference.equals(r))return{bitmapData:p,extent:a};const n=this.reprojectBitmapData({bitmapData:p,extent:a},r);return{bitmapData:n.bitmapData,extent:n.extent}}destroy(){this._ownsRctx?(h._instanceRefCount--,h._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),h._instance=null)):(this._quad.dispose(),this._program.dispose())}}h._instanceRefCount=0;class z{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let _=class extends nt(lt){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new ot,this._kmlVisualData=new z,this._fetchController=null,this.allVisiblePoints=new P,this.allVisiblePolylines=new P,this.allVisiblePolygons=new P,this.allVisibleMapImages=new H}async hitTest(e,t){const a=this.layer;return[this._pointsView?.hitTest(e),this._polylinesView?.hitTest(e),this._polygonsView?.hitTest(e)].flat().filter(Boolean).map(r=>(r.layer=a,r.sourceLayer=a,{type:"graphic",graphic:r,layer:a,mapPoint:e}))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new T({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new T({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new T({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",e=>{e.added.forEach(t=>this._addMapImage(t)),e.removed.forEach(t=>this._removeMapImage(t))}),Q(()=>this.layer.visibleSublayers,e=>{for(const t of this._kmlVisualData.allSublayers.values())t.visibility=0;for(const t of e){const a=this._kmlVisualData.allSublayers.get(t.id);a&&(a.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new h}detach(){this._fetchController=J(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=I(this._polygonsView),this._polylinesView=I(this._polylinesView),this._pointsView=I(this._pointsView),this._imageReprojector=I(this._imageReprojector)}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){(this.view.spatialReference?.isWGS84||this.view.spatialReference?.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(e.href,e.extent,this.view.spatialReference).then(t=>{const a=new rt(t.bitmapData);a.x=t.extent.xmin,a.y=t.extent.ymax,a.resolution=t.extent.width/t.bitmapData.width,a.rotation=e.rotation,this._mapImageContainer.addChild(a),this._bitmapIndex.set(e,a)})}async _getViewDependentUrl(e,t){const{viewFormat:a,viewBoundScale:r,httpQuery:i}=e;if(a!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let s;if(await X(),r!=null&&r!==1){const d=new j(t.extent);d.expand(r),s=d}else s=t.extent;s=k(s,L.WGS84);const l=k(s,L.WebMercator),p=s.xmin,n=s.xmax,o=s.ymin,w=s.ymax,D=t.size[0]*t.pixelRatio,x=t.size[1]*t.pixelRatio,f=Math.max(l.width,l.height),b={"[bboxWest]":p.toString(),"[bboxEast]":n.toString(),"[bboxSouth]":o.toString(),"[bboxNorth]":w.toString(),"[lookatLon]":s.center.x.toString(),"[lookatLat]":s.center.y.toString(),"[lookatRange]":f.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":s.center.x.toString(),"[lookatTerrainLat]":s.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":s.center.x.toString(),"[cameraLat]":s.center.y.toString(),"[cameraAlt]":f.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":D.toString(),"[vertPixels]":x.toString(),"[terrainEnabled]":"0","[clientVersion]":tt,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},m=d=>{for(const C in d){let y;for(y in b)d[C]=d[C].replace(y,b[y])}},V=q(a);m(V);let v={};i!=null&&(v=q(i),m(v));const S=Y(e.href);return S.query={...S.query,...V,...v},`${S.path}?${Z(V)}`}return e.href}async _fetchService(e){const t=new z;await this._loadVisualData(this.layer.url,t,e),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e))}_isSublayerVisible(e){const t=this._kmlVisualData.allSublayers.get(e);return!!t?.visibility&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(e,t,a){return this._fetchParsedKML(e,a).then(async r=>{for(const i of r.sublayers){t.allSublayers.set(i.id,i);const s=i.points?await M(i.points):[],l=i.polylines?await M(i.polylines):[],p=i.polygons?await M(i.polygons):[],n=i.mapImages?.map(o=>g.fromJSON(o))??[];if(t.allPoints.push(...s.map(o=>({item:o,sublayerId:i.id}))),t.allPolylines.push(...l.map(o=>({item:o,sublayerId:i.id}))),t.allPolygons.push(...p.map(o=>({item:o,sublayerId:i.id}))),t.allMapImages.push(...n.map(o=>({item:o,sublayerId:i.id}))),i.networkLink){const o=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(o,t,a)}}})}_fetchParsedKML(e,t){return et(e,this.layer.spatialReference,this.layer.refreshInterval,t).then(a=>it(a.data))}_removeMapImage(e){const t=this._bitmapIndex.get(e);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(e))}};c([u()],_.prototype,"_pointsView",void 0),c([u()],_.prototype,"_polylinesView",void 0),c([u()],_.prototype,"_polygonsView",void 0),c([u()],_.prototype,"updating",void 0),_=c([N("esri.views.2d.layers.KMLLayerView2D")],_);const Pe=_;export{Pe as default};
